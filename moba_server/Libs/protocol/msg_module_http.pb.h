// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_module_http.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fhttp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fhttp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "result_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fmodule_5fhttp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fmodule_5fhttp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fmodule_5fhttp_2eproto;
namespace ProtoMsg {
class HttpGetUniqRolId;
struct HttpGetUniqRolIdDefaultTypeInternal;
extern HttpGetUniqRolIdDefaultTypeInternal _HttpGetUniqRolId_default_instance_;
class HttpModifyNameRet;
struct HttpModifyNameRetDefaultTypeInternal;
extern HttpModifyNameRetDefaultTypeInternal _HttpModifyNameRet_default_instance_;
class HttpRetMsg;
struct HttpRetMsgDefaultTypeInternal;
extern HttpRetMsgDefaultTypeInternal _HttpRetMsg_default_instance_;
class HttpUserLoginRet;
struct HttpUserLoginRetDefaultTypeInternal;
extern HttpUserLoginRetDefaultTypeInternal _HttpUserLoginRet_default_instance_;
class MsgModule_Http;
struct MsgModule_HttpDefaultTypeInternal;
extern MsgModule_HttpDefaultTypeInternal _MsgModule_Http_default_instance_;
}  // namespace ProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMsg::HttpGetUniqRolId* Arena::CreateMaybeMessage<::ProtoMsg::HttpGetUniqRolId>(Arena*);
template<> ::ProtoMsg::HttpModifyNameRet* Arena::CreateMaybeMessage<::ProtoMsg::HttpModifyNameRet>(Arena*);
template<> ::ProtoMsg::HttpRetMsg* Arena::CreateMaybeMessage<::ProtoMsg::HttpRetMsg>(Arena*);
template<> ::ProtoMsg::HttpUserLoginRet* Arena::CreateMaybeMessage<::ProtoMsg::HttpUserLoginRet>(Arena*);
template<> ::ProtoMsg::MsgModule_Http* Arena::CreateMaybeMessage<::ProtoMsg::MsgModule_Http>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMsg {

enum MsgModule_Http_MsgCmd : int {
  MsgModule_Http_MsgCmd_Msg_Http_None = 0,
  MsgModule_Http_MsgCmd_MsgModule_Http_MsgCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgModule_Http_MsgCmd_MsgModule_Http_MsgCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgModule_Http_MsgCmd_IsValid(int value);
constexpr MsgModule_Http_MsgCmd MsgModule_Http_MsgCmd_MsgCmd_MIN = MsgModule_Http_MsgCmd_Msg_Http_None;
constexpr MsgModule_Http_MsgCmd MsgModule_Http_MsgCmd_MsgCmd_MAX = MsgModule_Http_MsgCmd_Msg_Http_None;
constexpr int MsgModule_Http_MsgCmd_MsgCmd_ARRAYSIZE = MsgModule_Http_MsgCmd_MsgCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgModule_Http_MsgCmd_descriptor();
template<typename T>
inline const std::string& MsgModule_Http_MsgCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgModule_Http_MsgCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgModule_Http_MsgCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgModule_Http_MsgCmd_descriptor(), enum_t_value);
}
inline bool MsgModule_Http_MsgCmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgModule_Http_MsgCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgModule_Http_MsgCmd>(
    MsgModule_Http_MsgCmd_descriptor(), name, value);
}
// ===================================================================

class MsgModule_Http final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.MsgModule_Http) */ {
 public:
  inline MsgModule_Http() : MsgModule_Http(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MsgModule_Http(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgModule_Http(const MsgModule_Http& from);
  MsgModule_Http(MsgModule_Http&& from) noexcept
    : MsgModule_Http() {
    *this = ::std::move(from);
  }

  inline MsgModule_Http& operator=(const MsgModule_Http& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgModule_Http& operator=(MsgModule_Http&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgModule_Http& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgModule_Http* internal_default_instance() {
    return reinterpret_cast<const MsgModule_Http*>(
               &_MsgModule_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgModule_Http& a, MsgModule_Http& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgModule_Http* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgModule_Http* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgModule_Http* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgModule_Http>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgModule_Http& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgModule_Http& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.MsgModule_Http";
  }
  protected:
  explicit MsgModule_Http(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgModule_Http_MsgCmd MsgCmd;
  static constexpr MsgCmd Msg_Http_None =
    MsgModule_Http_MsgCmd_Msg_Http_None;
  static inline bool MsgCmd_IsValid(int value) {
    return MsgModule_Http_MsgCmd_IsValid(value);
  }
  static constexpr MsgCmd MsgCmd_MIN =
    MsgModule_Http_MsgCmd_MsgCmd_MIN;
  static constexpr MsgCmd MsgCmd_MAX =
    MsgModule_Http_MsgCmd_MsgCmd_MAX;
  static constexpr int MsgCmd_ARRAYSIZE =
    MsgModule_Http_MsgCmd_MsgCmd_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgCmd_descriptor() {
    return MsgModule_Http_MsgCmd_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgCmd_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgCmd>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgCmd_Name.");
    return MsgModule_Http_MsgCmd_Name(enum_t_value);
  }
  static inline bool MsgCmd_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgCmd* value) {
    return MsgModule_Http_MsgCmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.MsgModule_Http)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fhttp_2eproto;
};
// -------------------------------------------------------------------

class HttpRetMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.HttpRetMsg) */ {
 public:
  inline HttpRetMsg() : HttpRetMsg(nullptr) {}
  ~HttpRetMsg() override;
  explicit PROTOBUF_CONSTEXPR HttpRetMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpRetMsg(const HttpRetMsg& from);
  HttpRetMsg(HttpRetMsg&& from) noexcept
    : HttpRetMsg() {
    *this = ::std::move(from);
  }

  inline HttpRetMsg& operator=(const HttpRetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpRetMsg& operator=(HttpRetMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpRetMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpRetMsg* internal_default_instance() {
    return reinterpret_cast<const HttpRetMsg*>(
               &_HttpRetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HttpRetMsg& a, HttpRetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpRetMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpRetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpRetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpRetMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpRetMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HttpRetMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpRetMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.HttpRetMsg";
  }
  protected:
  explicit HttpRetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrMsgFieldNumber = 2,
    kUiMsgIdFieldNumber = 1,
  };
  // bytes strMsg = 2;
  void clear_strmsg();
  const std::string& strmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strmsg();
  PROTOBUF_NODISCARD std::string* release_strmsg();
  void set_allocated_strmsg(std::string* strmsg);
  private:
  const std::string& _internal_strmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strmsg(const std::string& value);
  std::string* _internal_mutable_strmsg();
  public:

  // uint32 uiMsgId = 1;
  void clear_uimsgid();
  uint32_t uimsgid() const;
  void set_uimsgid(uint32_t value);
  private:
  uint32_t _internal_uimsgid() const;
  void _internal_set_uimsgid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.HttpRetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strmsg_;
  uint32_t uimsgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fhttp_2eproto;
};
// -------------------------------------------------------------------

class HttpGetUniqRolId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.HttpGetUniqRolId) */ {
 public:
  inline HttpGetUniqRolId() : HttpGetUniqRolId(nullptr) {}
  ~HttpGetUniqRolId() override;
  explicit PROTOBUF_CONSTEXPR HttpGetUniqRolId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpGetUniqRolId(const HttpGetUniqRolId& from);
  HttpGetUniqRolId(HttpGetUniqRolId&& from) noexcept
    : HttpGetUniqRolId() {
    *this = ::std::move(from);
  }

  inline HttpGetUniqRolId& operator=(const HttpGetUniqRolId& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpGetUniqRolId& operator=(HttpGetUniqRolId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpGetUniqRolId& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpGetUniqRolId* internal_default_instance() {
    return reinterpret_cast<const HttpGetUniqRolId*>(
               &_HttpGetUniqRolId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HttpGetUniqRolId& a, HttpGetUniqRolId& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpGetUniqRolId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpGetUniqRolId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpGetUniqRolId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpGetUniqRolId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpGetUniqRolId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HttpGetUniqRolId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpGetUniqRolId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.HttpGetUniqRolId";
  }
  protected:
  explicit HttpGetUniqRolId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrPlayerNameFieldNumber = 4,
    kLlPlayerIdFieldNumber = 1,
    kUiStateFieldNumber = 2,
    kUiServerIdFieldNumber = 3,
  };
  // string strPlayerName = 4;
  void clear_strplayername();
  const std::string& strplayername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strplayername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strplayername();
  PROTOBUF_NODISCARD std::string* release_strplayername();
  void set_allocated_strplayername(std::string* strplayername);
  private:
  const std::string& _internal_strplayername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strplayername(const std::string& value);
  std::string* _internal_mutable_strplayername();
  public:

  // int64 llPlayerId = 1;
  void clear_llplayerid();
  int64_t llplayerid() const;
  void set_llplayerid(int64_t value);
  private:
  int64_t _internal_llplayerid() const;
  void _internal_set_llplayerid(int64_t value);
  public:

  // uint32 uiState = 2;
  void clear_uistate();
  uint32_t uistate() const;
  void set_uistate(uint32_t value);
  private:
  uint32_t _internal_uistate() const;
  void _internal_set_uistate(uint32_t value);
  public:

  // uint32 uiServerId = 3;
  void clear_uiserverid();
  uint32_t uiserverid() const;
  void set_uiserverid(uint32_t value);
  private:
  uint32_t _internal_uiserverid() const;
  void _internal_set_uiserverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.HttpGetUniqRolId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strplayername_;
  int64_t llplayerid_;
  uint32_t uistate_;
  uint32_t uiserverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fhttp_2eproto;
};
// -------------------------------------------------------------------

class HttpUserLoginRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.HttpUserLoginRet) */ {
 public:
  inline HttpUserLoginRet() : HttpUserLoginRet(nullptr) {}
  ~HttpUserLoginRet() override;
  explicit PROTOBUF_CONSTEXPR HttpUserLoginRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpUserLoginRet(const HttpUserLoginRet& from);
  HttpUserLoginRet(HttpUserLoginRet&& from) noexcept
    : HttpUserLoginRet() {
    *this = ::std::move(from);
  }

  inline HttpUserLoginRet& operator=(const HttpUserLoginRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpUserLoginRet& operator=(HttpUserLoginRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpUserLoginRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpUserLoginRet* internal_default_instance() {
    return reinterpret_cast<const HttpUserLoginRet*>(
               &_HttpUserLoginRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HttpUserLoginRet& a, HttpUserLoginRet& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpUserLoginRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpUserLoginRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpUserLoginRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpUserLoginRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpUserLoginRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HttpUserLoginRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpUserLoginRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.HttpUserLoginRet";
  }
  protected:
  explicit HttpUserLoginRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrProvinceNameFieldNumber = 5,
    kStrSessionIdFieldNumber = 6,
    kStrDevIdFieldNumber = 8,
    kLlPlayerIdFieldNumber = 1,
    kEResultFieldNumber = 2,
    kUiGateIdFieldNumber = 3,
    kIProvinceFieldNumber = 4,
    kUiGmLevelFieldNumber = 7,
    kUiProAreaFieldNumber = 9,
  };
  // string strProvinceName = 5;
  void clear_strprovincename();
  const std::string& strprovincename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strprovincename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strprovincename();
  PROTOBUF_NODISCARD std::string* release_strprovincename();
  void set_allocated_strprovincename(std::string* strprovincename);
  private:
  const std::string& _internal_strprovincename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strprovincename(const std::string& value);
  std::string* _internal_mutable_strprovincename();
  public:

  // string strSessionId = 6;
  void clear_strsessionid();
  const std::string& strsessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strsessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strsessionid();
  PROTOBUF_NODISCARD std::string* release_strsessionid();
  void set_allocated_strsessionid(std::string* strsessionid);
  private:
  const std::string& _internal_strsessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strsessionid(const std::string& value);
  std::string* _internal_mutable_strsessionid();
  public:

  // string strDevId = 8;
  void clear_strdevid();
  const std::string& strdevid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strdevid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strdevid();
  PROTOBUF_NODISCARD std::string* release_strdevid();
  void set_allocated_strdevid(std::string* strdevid);
  private:
  const std::string& _internal_strdevid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strdevid(const std::string& value);
  std::string* _internal_mutable_strdevid();
  public:

  // int64 llPlayerId = 1;
  void clear_llplayerid();
  int64_t llplayerid() const;
  void set_llplayerid(int64_t value);
  private:
  int64_t _internal_llplayerid() const;
  void _internal_set_llplayerid(int64_t value);
  public:

  // .ProtoMsg.ResultCode eResult = 2;
  void clear_eresult();
  ::ProtoMsg::ResultCode eresult() const;
  void set_eresult(::ProtoMsg::ResultCode value);
  private:
  ::ProtoMsg::ResultCode _internal_eresult() const;
  void _internal_set_eresult(::ProtoMsg::ResultCode value);
  public:

  // uint32 uiGateId = 3;
  void clear_uigateid();
  uint32_t uigateid() const;
  void set_uigateid(uint32_t value);
  private:
  uint32_t _internal_uigateid() const;
  void _internal_set_uigateid(uint32_t value);
  public:

  // int32 iProvince = 4;
  void clear_iprovince();
  int32_t iprovince() const;
  void set_iprovince(int32_t value);
  private:
  int32_t _internal_iprovince() const;
  void _internal_set_iprovince(int32_t value);
  public:

  // uint32 uiGmLevel = 7;
  void clear_uigmlevel();
  uint32_t uigmlevel() const;
  void set_uigmlevel(uint32_t value);
  private:
  uint32_t _internal_uigmlevel() const;
  void _internal_set_uigmlevel(uint32_t value);
  public:

  // uint32 uiProArea = 9;
  void clear_uiproarea();
  uint32_t uiproarea() const;
  void set_uiproarea(uint32_t value);
  private:
  uint32_t _internal_uiproarea() const;
  void _internal_set_uiproarea(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.HttpUserLoginRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strprovincename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strsessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strdevid_;
  int64_t llplayerid_;
  int eresult_;
  uint32_t uigateid_;
  int32_t iprovince_;
  uint32_t uigmlevel_;
  uint32_t uiproarea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fhttp_2eproto;
};
// -------------------------------------------------------------------

class HttpModifyNameRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.HttpModifyNameRet) */ {
 public:
  inline HttpModifyNameRet() : HttpModifyNameRet(nullptr) {}
  ~HttpModifyNameRet() override;
  explicit PROTOBUF_CONSTEXPR HttpModifyNameRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpModifyNameRet(const HttpModifyNameRet& from);
  HttpModifyNameRet(HttpModifyNameRet&& from) noexcept
    : HttpModifyNameRet() {
    *this = ::std::move(from);
  }

  inline HttpModifyNameRet& operator=(const HttpModifyNameRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpModifyNameRet& operator=(HttpModifyNameRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpModifyNameRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpModifyNameRet* internal_default_instance() {
    return reinterpret_cast<const HttpModifyNameRet*>(
               &_HttpModifyNameRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HttpModifyNameRet& a, HttpModifyNameRet& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpModifyNameRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpModifyNameRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpModifyNameRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpModifyNameRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpModifyNameRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HttpModifyNameRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpModifyNameRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.HttpModifyNameRet";
  }
  protected:
  explicit HttpModifyNameRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrPlayerNameFieldNumber = 4,
    kLlPlayerIdFieldNumber = 1,
    kEResultFieldNumber = 2,
    kUiServerIdFieldNumber = 3,
  };
  // string strPlayerName = 4;
  void clear_strplayername();
  const std::string& strplayername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strplayername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strplayername();
  PROTOBUF_NODISCARD std::string* release_strplayername();
  void set_allocated_strplayername(std::string* strplayername);
  private:
  const std::string& _internal_strplayername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strplayername(const std::string& value);
  std::string* _internal_mutable_strplayername();
  public:

  // int64 llPlayerId = 1;
  void clear_llplayerid();
  int64_t llplayerid() const;
  void set_llplayerid(int64_t value);
  private:
  int64_t _internal_llplayerid() const;
  void _internal_set_llplayerid(int64_t value);
  public:

  // .ProtoMsg.ResultCode eResult = 2;
  void clear_eresult();
  ::ProtoMsg::ResultCode eresult() const;
  void set_eresult(::ProtoMsg::ResultCode value);
  private:
  ::ProtoMsg::ResultCode _internal_eresult() const;
  void _internal_set_eresult(::ProtoMsg::ResultCode value);
  public:

  // uint32 uiServerId = 3;
  void clear_uiserverid();
  uint32_t uiserverid() const;
  void set_uiserverid(uint32_t value);
  private:
  uint32_t _internal_uiserverid() const;
  void _internal_set_uiserverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.HttpModifyNameRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strplayername_;
  int64_t llplayerid_;
  int eresult_;
  uint32_t uiserverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fhttp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgModule_Http

// -------------------------------------------------------------------

// HttpRetMsg

// uint32 uiMsgId = 1;
inline void HttpRetMsg::clear_uimsgid() {
  uimsgid_ = 0u;
}
inline uint32_t HttpRetMsg::_internal_uimsgid() const {
  return uimsgid_;
}
inline uint32_t HttpRetMsg::uimsgid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpRetMsg.uiMsgId)
  return _internal_uimsgid();
}
inline void HttpRetMsg::_internal_set_uimsgid(uint32_t value) {
  
  uimsgid_ = value;
}
inline void HttpRetMsg::set_uimsgid(uint32_t value) {
  _internal_set_uimsgid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpRetMsg.uiMsgId)
}

// bytes strMsg = 2;
inline void HttpRetMsg::clear_strmsg() {
  strmsg_.ClearToEmpty();
}
inline const std::string& HttpRetMsg::strmsg() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpRetMsg.strMsg)
  return _internal_strmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpRetMsg::set_strmsg(ArgT0&& arg0, ArgT... args) {
 
 strmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpRetMsg.strMsg)
}
inline std::string* HttpRetMsg::mutable_strmsg() {
  std::string* _s = _internal_mutable_strmsg();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.HttpRetMsg.strMsg)
  return _s;
}
inline const std::string& HttpRetMsg::_internal_strmsg() const {
  return strmsg_.Get();
}
inline void HttpRetMsg::_internal_set_strmsg(const std::string& value) {
  
  strmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRetMsg::_internal_mutable_strmsg() {
  
  return strmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* HttpRetMsg::release_strmsg() {
  // @@protoc_insertion_point(field_release:ProtoMsg.HttpRetMsg.strMsg)
  return strmsg_.Release();
}
inline void HttpRetMsg::set_allocated_strmsg(std::string* strmsg) {
  if (strmsg != nullptr) {
    
  } else {
    
  }
  strmsg_.SetAllocated(strmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strmsg_.IsDefault()) {
    strmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.HttpRetMsg.strMsg)
}

// -------------------------------------------------------------------

// HttpGetUniqRolId

// int64 llPlayerId = 1;
inline void HttpGetUniqRolId::clear_llplayerid() {
  llplayerid_ = int64_t{0};
}
inline int64_t HttpGetUniqRolId::_internal_llplayerid() const {
  return llplayerid_;
}
inline int64_t HttpGetUniqRolId::llplayerid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpGetUniqRolId.llPlayerId)
  return _internal_llplayerid();
}
inline void HttpGetUniqRolId::_internal_set_llplayerid(int64_t value) {
  
  llplayerid_ = value;
}
inline void HttpGetUniqRolId::set_llplayerid(int64_t value) {
  _internal_set_llplayerid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpGetUniqRolId.llPlayerId)
}

// uint32 uiState = 2;
inline void HttpGetUniqRolId::clear_uistate() {
  uistate_ = 0u;
}
inline uint32_t HttpGetUniqRolId::_internal_uistate() const {
  return uistate_;
}
inline uint32_t HttpGetUniqRolId::uistate() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpGetUniqRolId.uiState)
  return _internal_uistate();
}
inline void HttpGetUniqRolId::_internal_set_uistate(uint32_t value) {
  
  uistate_ = value;
}
inline void HttpGetUniqRolId::set_uistate(uint32_t value) {
  _internal_set_uistate(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpGetUniqRolId.uiState)
}

// uint32 uiServerId = 3;
inline void HttpGetUniqRolId::clear_uiserverid() {
  uiserverid_ = 0u;
}
inline uint32_t HttpGetUniqRolId::_internal_uiserverid() const {
  return uiserverid_;
}
inline uint32_t HttpGetUniqRolId::uiserverid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpGetUniqRolId.uiServerId)
  return _internal_uiserverid();
}
inline void HttpGetUniqRolId::_internal_set_uiserverid(uint32_t value) {
  
  uiserverid_ = value;
}
inline void HttpGetUniqRolId::set_uiserverid(uint32_t value) {
  _internal_set_uiserverid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpGetUniqRolId.uiServerId)
}

// string strPlayerName = 4;
inline void HttpGetUniqRolId::clear_strplayername() {
  strplayername_.ClearToEmpty();
}
inline const std::string& HttpGetUniqRolId::strplayername() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpGetUniqRolId.strPlayerName)
  return _internal_strplayername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpGetUniqRolId::set_strplayername(ArgT0&& arg0, ArgT... args) {
 
 strplayername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpGetUniqRolId.strPlayerName)
}
inline std::string* HttpGetUniqRolId::mutable_strplayername() {
  std::string* _s = _internal_mutable_strplayername();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.HttpGetUniqRolId.strPlayerName)
  return _s;
}
inline const std::string& HttpGetUniqRolId::_internal_strplayername() const {
  return strplayername_.Get();
}
inline void HttpGetUniqRolId::_internal_set_strplayername(const std::string& value) {
  
  strplayername_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpGetUniqRolId::_internal_mutable_strplayername() {
  
  return strplayername_.Mutable(GetArenaForAllocation());
}
inline std::string* HttpGetUniqRolId::release_strplayername() {
  // @@protoc_insertion_point(field_release:ProtoMsg.HttpGetUniqRolId.strPlayerName)
  return strplayername_.Release();
}
inline void HttpGetUniqRolId::set_allocated_strplayername(std::string* strplayername) {
  if (strplayername != nullptr) {
    
  } else {
    
  }
  strplayername_.SetAllocated(strplayername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strplayername_.IsDefault()) {
    strplayername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.HttpGetUniqRolId.strPlayerName)
}

// -------------------------------------------------------------------

// HttpUserLoginRet

// int64 llPlayerId = 1;
inline void HttpUserLoginRet::clear_llplayerid() {
  llplayerid_ = int64_t{0};
}
inline int64_t HttpUserLoginRet::_internal_llplayerid() const {
  return llplayerid_;
}
inline int64_t HttpUserLoginRet::llplayerid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.llPlayerId)
  return _internal_llplayerid();
}
inline void HttpUserLoginRet::_internal_set_llplayerid(int64_t value) {
  
  llplayerid_ = value;
}
inline void HttpUserLoginRet::set_llplayerid(int64_t value) {
  _internal_set_llplayerid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.llPlayerId)
}

// .ProtoMsg.ResultCode eResult = 2;
inline void HttpUserLoginRet::clear_eresult() {
  eresult_ = 0;
}
inline ::ProtoMsg::ResultCode HttpUserLoginRet::_internal_eresult() const {
  return static_cast< ::ProtoMsg::ResultCode >(eresult_);
}
inline ::ProtoMsg::ResultCode HttpUserLoginRet::eresult() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.eResult)
  return _internal_eresult();
}
inline void HttpUserLoginRet::_internal_set_eresult(::ProtoMsg::ResultCode value) {
  
  eresult_ = value;
}
inline void HttpUserLoginRet::set_eresult(::ProtoMsg::ResultCode value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.eResult)
}

// uint32 uiGateId = 3;
inline void HttpUserLoginRet::clear_uigateid() {
  uigateid_ = 0u;
}
inline uint32_t HttpUserLoginRet::_internal_uigateid() const {
  return uigateid_;
}
inline uint32_t HttpUserLoginRet::uigateid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.uiGateId)
  return _internal_uigateid();
}
inline void HttpUserLoginRet::_internal_set_uigateid(uint32_t value) {
  
  uigateid_ = value;
}
inline void HttpUserLoginRet::set_uigateid(uint32_t value) {
  _internal_set_uigateid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.uiGateId)
}

// int32 iProvince = 4;
inline void HttpUserLoginRet::clear_iprovince() {
  iprovince_ = 0;
}
inline int32_t HttpUserLoginRet::_internal_iprovince() const {
  return iprovince_;
}
inline int32_t HttpUserLoginRet::iprovince() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.iProvince)
  return _internal_iprovince();
}
inline void HttpUserLoginRet::_internal_set_iprovince(int32_t value) {
  
  iprovince_ = value;
}
inline void HttpUserLoginRet::set_iprovince(int32_t value) {
  _internal_set_iprovince(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.iProvince)
}

// string strProvinceName = 5;
inline void HttpUserLoginRet::clear_strprovincename() {
  strprovincename_.ClearToEmpty();
}
inline const std::string& HttpUserLoginRet::strprovincename() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.strProvinceName)
  return _internal_strprovincename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpUserLoginRet::set_strprovincename(ArgT0&& arg0, ArgT... args) {
 
 strprovincename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.strProvinceName)
}
inline std::string* HttpUserLoginRet::mutable_strprovincename() {
  std::string* _s = _internal_mutable_strprovincename();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.HttpUserLoginRet.strProvinceName)
  return _s;
}
inline const std::string& HttpUserLoginRet::_internal_strprovincename() const {
  return strprovincename_.Get();
}
inline void HttpUserLoginRet::_internal_set_strprovincename(const std::string& value) {
  
  strprovincename_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpUserLoginRet::_internal_mutable_strprovincename() {
  
  return strprovincename_.Mutable(GetArenaForAllocation());
}
inline std::string* HttpUserLoginRet::release_strprovincename() {
  // @@protoc_insertion_point(field_release:ProtoMsg.HttpUserLoginRet.strProvinceName)
  return strprovincename_.Release();
}
inline void HttpUserLoginRet::set_allocated_strprovincename(std::string* strprovincename) {
  if (strprovincename != nullptr) {
    
  } else {
    
  }
  strprovincename_.SetAllocated(strprovincename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strprovincename_.IsDefault()) {
    strprovincename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.HttpUserLoginRet.strProvinceName)
}

// string strSessionId = 6;
inline void HttpUserLoginRet::clear_strsessionid() {
  strsessionid_.ClearToEmpty();
}
inline const std::string& HttpUserLoginRet::strsessionid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.strSessionId)
  return _internal_strsessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpUserLoginRet::set_strsessionid(ArgT0&& arg0, ArgT... args) {
 
 strsessionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.strSessionId)
}
inline std::string* HttpUserLoginRet::mutable_strsessionid() {
  std::string* _s = _internal_mutable_strsessionid();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.HttpUserLoginRet.strSessionId)
  return _s;
}
inline const std::string& HttpUserLoginRet::_internal_strsessionid() const {
  return strsessionid_.Get();
}
inline void HttpUserLoginRet::_internal_set_strsessionid(const std::string& value) {
  
  strsessionid_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpUserLoginRet::_internal_mutable_strsessionid() {
  
  return strsessionid_.Mutable(GetArenaForAllocation());
}
inline std::string* HttpUserLoginRet::release_strsessionid() {
  // @@protoc_insertion_point(field_release:ProtoMsg.HttpUserLoginRet.strSessionId)
  return strsessionid_.Release();
}
inline void HttpUserLoginRet::set_allocated_strsessionid(std::string* strsessionid) {
  if (strsessionid != nullptr) {
    
  } else {
    
  }
  strsessionid_.SetAllocated(strsessionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strsessionid_.IsDefault()) {
    strsessionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.HttpUserLoginRet.strSessionId)
}

// uint32 uiGmLevel = 7;
inline void HttpUserLoginRet::clear_uigmlevel() {
  uigmlevel_ = 0u;
}
inline uint32_t HttpUserLoginRet::_internal_uigmlevel() const {
  return uigmlevel_;
}
inline uint32_t HttpUserLoginRet::uigmlevel() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.uiGmLevel)
  return _internal_uigmlevel();
}
inline void HttpUserLoginRet::_internal_set_uigmlevel(uint32_t value) {
  
  uigmlevel_ = value;
}
inline void HttpUserLoginRet::set_uigmlevel(uint32_t value) {
  _internal_set_uigmlevel(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.uiGmLevel)
}

// string strDevId = 8;
inline void HttpUserLoginRet::clear_strdevid() {
  strdevid_.ClearToEmpty();
}
inline const std::string& HttpUserLoginRet::strdevid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.strDevId)
  return _internal_strdevid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpUserLoginRet::set_strdevid(ArgT0&& arg0, ArgT... args) {
 
 strdevid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.strDevId)
}
inline std::string* HttpUserLoginRet::mutable_strdevid() {
  std::string* _s = _internal_mutable_strdevid();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.HttpUserLoginRet.strDevId)
  return _s;
}
inline const std::string& HttpUserLoginRet::_internal_strdevid() const {
  return strdevid_.Get();
}
inline void HttpUserLoginRet::_internal_set_strdevid(const std::string& value) {
  
  strdevid_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpUserLoginRet::_internal_mutable_strdevid() {
  
  return strdevid_.Mutable(GetArenaForAllocation());
}
inline std::string* HttpUserLoginRet::release_strdevid() {
  // @@protoc_insertion_point(field_release:ProtoMsg.HttpUserLoginRet.strDevId)
  return strdevid_.Release();
}
inline void HttpUserLoginRet::set_allocated_strdevid(std::string* strdevid) {
  if (strdevid != nullptr) {
    
  } else {
    
  }
  strdevid_.SetAllocated(strdevid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strdevid_.IsDefault()) {
    strdevid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.HttpUserLoginRet.strDevId)
}

// uint32 uiProArea = 9;
inline void HttpUserLoginRet::clear_uiproarea() {
  uiproarea_ = 0u;
}
inline uint32_t HttpUserLoginRet::_internal_uiproarea() const {
  return uiproarea_;
}
inline uint32_t HttpUserLoginRet::uiproarea() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpUserLoginRet.uiProArea)
  return _internal_uiproarea();
}
inline void HttpUserLoginRet::_internal_set_uiproarea(uint32_t value) {
  
  uiproarea_ = value;
}
inline void HttpUserLoginRet::set_uiproarea(uint32_t value) {
  _internal_set_uiproarea(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpUserLoginRet.uiProArea)
}

// -------------------------------------------------------------------

// HttpModifyNameRet

// int64 llPlayerId = 1;
inline void HttpModifyNameRet::clear_llplayerid() {
  llplayerid_ = int64_t{0};
}
inline int64_t HttpModifyNameRet::_internal_llplayerid() const {
  return llplayerid_;
}
inline int64_t HttpModifyNameRet::llplayerid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpModifyNameRet.llPlayerId)
  return _internal_llplayerid();
}
inline void HttpModifyNameRet::_internal_set_llplayerid(int64_t value) {
  
  llplayerid_ = value;
}
inline void HttpModifyNameRet::set_llplayerid(int64_t value) {
  _internal_set_llplayerid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpModifyNameRet.llPlayerId)
}

// .ProtoMsg.ResultCode eResult = 2;
inline void HttpModifyNameRet::clear_eresult() {
  eresult_ = 0;
}
inline ::ProtoMsg::ResultCode HttpModifyNameRet::_internal_eresult() const {
  return static_cast< ::ProtoMsg::ResultCode >(eresult_);
}
inline ::ProtoMsg::ResultCode HttpModifyNameRet::eresult() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpModifyNameRet.eResult)
  return _internal_eresult();
}
inline void HttpModifyNameRet::_internal_set_eresult(::ProtoMsg::ResultCode value) {
  
  eresult_ = value;
}
inline void HttpModifyNameRet::set_eresult(::ProtoMsg::ResultCode value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpModifyNameRet.eResult)
}

// uint32 uiServerId = 3;
inline void HttpModifyNameRet::clear_uiserverid() {
  uiserverid_ = 0u;
}
inline uint32_t HttpModifyNameRet::_internal_uiserverid() const {
  return uiserverid_;
}
inline uint32_t HttpModifyNameRet::uiserverid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpModifyNameRet.uiServerId)
  return _internal_uiserverid();
}
inline void HttpModifyNameRet::_internal_set_uiserverid(uint32_t value) {
  
  uiserverid_ = value;
}
inline void HttpModifyNameRet::set_uiserverid(uint32_t value) {
  _internal_set_uiserverid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpModifyNameRet.uiServerId)
}

// string strPlayerName = 4;
inline void HttpModifyNameRet::clear_strplayername() {
  strplayername_.ClearToEmpty();
}
inline const std::string& HttpModifyNameRet::strplayername() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.HttpModifyNameRet.strPlayerName)
  return _internal_strplayername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HttpModifyNameRet::set_strplayername(ArgT0&& arg0, ArgT... args) {
 
 strplayername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.HttpModifyNameRet.strPlayerName)
}
inline std::string* HttpModifyNameRet::mutable_strplayername() {
  std::string* _s = _internal_mutable_strplayername();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.HttpModifyNameRet.strPlayerName)
  return _s;
}
inline const std::string& HttpModifyNameRet::_internal_strplayername() const {
  return strplayername_.Get();
}
inline void HttpModifyNameRet::_internal_set_strplayername(const std::string& value) {
  
  strplayername_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpModifyNameRet::_internal_mutable_strplayername() {
  
  return strplayername_.Mutable(GetArenaForAllocation());
}
inline std::string* HttpModifyNameRet::release_strplayername() {
  // @@protoc_insertion_point(field_release:ProtoMsg.HttpModifyNameRet.strPlayerName)
  return strplayername_.Release();
}
inline void HttpModifyNameRet::set_allocated_strplayername(std::string* strplayername) {
  if (strplayername != nullptr) {
    
  } else {
    
  }
  strplayername_.SetAllocated(strplayername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strplayername_.IsDefault()) {
    strplayername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.HttpModifyNameRet.strPlayerName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoMsg::MsgModule_Http_MsgCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::MsgModule_Http_MsgCmd>() {
  return ::ProtoMsg::MsgModule_Http_MsgCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fhttp_2eproto
