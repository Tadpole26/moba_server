// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_common.proto

#include "msg_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ProtoMsg {
PROTOBUF_CONSTEXPR game_item_t::game_item_t(
    ::_pbi::ConstantInitialized)
  : uiid_(0u)
  , uinum_(0u)
  , lltime_(int64_t{0}){}
struct game_item_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR game_item_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~game_item_tDefaultTypeInternal() {}
  union {
    game_item_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 game_item_tDefaultTypeInternal _game_item_t_default_instance_;
PROTOBUF_CONSTEXPR hero_common_info_t::hero_common_info_t(
    ::_pbi::ConstantInitialized)
  : iheroid_(0)
  , ilevel_(0)
  , istar_(0){}
struct hero_common_info_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR hero_common_info_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~hero_common_info_tDefaultTypeInternal() {}
  union {
    hero_common_info_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 hero_common_info_tDefaultTypeInternal _hero_common_info_t_default_instance_;
PROTOBUF_CONSTEXPR user_common_info_t::user_common_info_t(
    ::_pbi::ConstantInitialized)
  : vecheros_()
  , strname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , lluid_(int64_t{0})
  , ipos_(0)
  , ilevel_(0)
  , erobottype_(0)

  , iside_(0){}
struct user_common_info_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR user_common_info_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~user_common_info_tDefaultTypeInternal() {}
  union {
    user_common_info_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 user_common_info_tDefaultTypeInternal _user_common_info_t_default_instance_;
PROTOBUF_CONSTEXPR user_battle_info_t::user_battle_info_t(
    ::_pbi::ConstantInitialized)
  : strusersessionid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ouserinfo_(nullptr)
  , imatchsec_(0)
  , bob_(false)
  , iconvid_(0){}
struct user_battle_info_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR user_battle_info_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~user_battle_info_tDefaultTypeInternal() {}
  union {
    user_battle_info_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 user_battle_info_tDefaultTypeInternal _user_battle_info_t_default_instance_;
PROTOBUF_CONSTEXPR user_battle_result_t::user_battle_result_t(
    ::_pbi::ConstantInitialized)
  : lluid_(int64_t{0})
  , iposition_(0)
  , eresult_(0)

  , llendtime_(int64_t{0}){}
struct user_battle_result_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR user_battle_result_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~user_battle_result_tDefaultTypeInternal() {}
  union {
    user_battle_result_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 user_battle_result_tDefaultTypeInternal _user_battle_result_t_default_instance_;
}  // namespace ProtoMsg
static ::_pb::Metadata file_level_metadata_msg_5fcommon_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_5fcommon_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_5fcommon_2eproto = nullptr;

const uint32_t TableStruct_msg_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::game_item_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::game_item_t, uiid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::game_item_t, uinum_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::game_item_t, lltime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::hero_common_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::hero_common_info_t, iheroid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::hero_common_info_t, ilevel_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::hero_common_info_t, istar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, lluid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, ipos_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, strname_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, ilevel_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, vecheros_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, erobottype_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_common_info_t, iside_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_info_t, strusersessionid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_info_t, ouserinfo_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_info_t, imatchsec_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_info_t, bob_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_info_t, iconvid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_result_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_result_t, lluid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_result_t, iposition_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_result_t, eresult_),
  PROTOBUF_FIELD_OFFSET(::ProtoMsg::user_battle_result_t, llendtime_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ProtoMsg::game_item_t)},
  { 9, -1, -1, sizeof(::ProtoMsg::hero_common_info_t)},
  { 18, -1, -1, sizeof(::ProtoMsg::user_common_info_t)},
  { 31, -1, -1, sizeof(::ProtoMsg::user_battle_info_t)},
  { 42, -1, -1, sizeof(::ProtoMsg::user_battle_result_t)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ProtoMsg::_game_item_t_default_instance_._instance,
  &::ProtoMsg::_hero_common_info_t_default_instance_._instance,
  &::ProtoMsg::_user_common_info_t_default_instance_._instance,
  &::ProtoMsg::_user_battle_info_t_default_instance_._instance,
  &::ProtoMsg::_user_battle_result_t_default_instance_._instance,
};

const char descriptor_table_protodef_msg_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020msg_common.proto\022\010ProtoMsg\":\n\013game_ite"
  "m_t\022\014\n\004uiId\030\001 \001(\r\022\r\n\005uiNum\030\002 \001(\r\022\016\n\006llTi"
  "me\030\003 \001(\003\"D\n\022hero_common_info_t\022\017\n\007iHeroI"
  "d\030\001 \001(\005\022\016\n\006iLevel\030\002 \001(\005\022\r\n\005iStar\030\003 \001(\005\"\273"
  "\001\n\022user_common_info_t\022\r\n\005llUid\030\001 \001(\003\022\014\n\004"
  "iPos\030\002 \001(\005\022\017\n\007strName\030\003 \001(\t\022\016\n\006iLevel\030\004 "
  "\001(\005\022.\n\010vecHeros\030\005 \003(\0132\034.ProtoMsg.hero_co"
  "mmon_info_t\022(\n\neRobotType\030\006 \001(\0162\024.ProtoM"
  "sg.ERobotType\022\r\n\005iSide\030\007 \001(\005\"\220\001\n\022user_ba"
  "ttle_info_t\022\030\n\020strUserSessionId\030\001 \001(\t\022/\n"
  "\toUserInfo\030\002 \001(\0132\034.ProtoMsg.user_common_"
  "info_t\022\021\n\tiMatchSec\030\003 \001(\005\022\013\n\003bOb\030\004 \001(\010\022\017"
  "\n\007iConvId\030\005 \001(\005\"u\n\024user_battle_result_t\022"
  "\r\n\005llUid\030\001 \001(\003\022\021\n\tiPosition\030\002 \001(\005\022(\n\007eRe"
  "sult\030\003 \001(\0162\027.ProtoMsg.EBattleResult\022\021\n\tl"
  "lEndTime\030\004 \001(\003*N\n\rEPlayerStatus\022\023\n\017ePlay"
  "er_Offline\020\000\022\022\n\016ePlayer_Online\020\001\022\024\n\020ePla"
  "yer_InBattle\020\002*h\n\tERoomType\022\022\n\016ERoomType"
  "_None\020\000\022\031\n\025ERoomType_PVP_Leisure\020\001\022\025\n\021ER"
  "oomType_PVP_1V1\020\002\022\025\n\021ERoomType_PVP_2V2\020\003"
  "*\355\001\n\014ELeisureType\022\025\n\021ELeisureType_None\020\000"
  "\022\026\n\022ELeisureType_Melee\020\001\022\033\n\027ELeisureType"
  "_Stronghold\020\002\022\031\n\025ELeisureType_RandBoss\020\003"
  "\022\033\n\027ELeisureType_RandGundam\020\004\022\032\n\026ELeisur"
  "eType_BanGundam\020\005\022\036\n\032ELeisureType_Unlimi"
  "tedFire\020\006\022\035\n\031ELeisureType_SingleBattle\020\007"
  "*d\n\013ERoomStatus\022\024\n\020ERoomStatus_None\020\000\022\025\n"
  "\021ERoomStatus_Start\020\001\022\023\n\017ERoomStatus_Run\020"
  "\002\022\023\n\017ERoomStatus_End\020\003*\302\001\n\nERobotType\022\023\n"
  "\017ERobotType_None\020\000\022\025\n\021ERobotType_Level1\020"
  "\001\022\025\n\021ERobotType_Level2\020\002\022\025\n\021ERobotType_L"
  "evel3\020\003\022\025\n\021ERobotType_Level4\020\004\022\025\n\021ERobot"
  "Type_Level5\020\005\022\025\n\021ERobotType_Level6\020\006\022\025\n\021"
  "ERobotType_Level7\020d*q\n\rEBattleResult\022\026\n\022"
  "EBattleResult_None\020\000\022\025\n\021EBattleResult_Wi"
  "n\020\001\022\026\n\022EBattleResult_Lose\020\002\022\031\n\025EBattleRe"
  "sult_DagFall\020\003*\216\002\n\007EBRCode\022\023\n\017EBRCode_Su"
  "ccess\020\000\022\020\n\014EBRCode_Diff\020\001\022\024\n\020EEBRCode_Wi"
  "nSame\020\002\022\023\n\017EBRCode_PvgDiff\020\003\022\021\n\rEBRCode_"
  "Empty\020\004\022\023\n\017EBRCode_Timeout\020\005\022\023\n\017EBRCode_"
  "NoStart\020\006\022\020\n\014EBRCode_Oper\020\007\022\026\n\022EBRCode_R"
  "esTimeout\020\010\022\027\n\023EBRCode_OfflineDiff\020\t\022\032\n\026"
  "EBRCode_OfflineTimeout\020\n\022\025\n\021EBRCode_Oneu"
  "nSync\020\013b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_msg_5fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fcommon_2eproto = {
    false, false, 1735, descriptor_table_protodef_msg_5fcommon_2eproto,
    "msg_common.proto",
    &descriptor_table_msg_5fcommon_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_msg_5fcommon_2eproto::offsets,
    file_level_metadata_msg_5fcommon_2eproto, file_level_enum_descriptors_msg_5fcommon_2eproto,
    file_level_service_descriptors_msg_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fcommon_2eproto_getter() {
  return &descriptor_table_msg_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fcommon_2eproto(&descriptor_table_msg_5fcommon_2eproto);
namespace ProtoMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcommon_2eproto);
  return file_level_enum_descriptors_msg_5fcommon_2eproto[0];
}
bool EPlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERoomType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcommon_2eproto);
  return file_level_enum_descriptors_msg_5fcommon_2eproto[1];
}
bool ERoomType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELeisureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcommon_2eproto);
  return file_level_enum_descriptors_msg_5fcommon_2eproto[2];
}
bool ELeisureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERoomStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcommon_2eproto);
  return file_level_enum_descriptors_msg_5fcommon_2eproto[3];
}
bool ERoomStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERobotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcommon_2eproto);
  return file_level_enum_descriptors_msg_5fcommon_2eproto[4];
}
bool ERobotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBattleResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcommon_2eproto);
  return file_level_enum_descriptors_msg_5fcommon_2eproto[5];
}
bool EBattleResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBRCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcommon_2eproto);
  return file_level_enum_descriptors_msg_5fcommon_2eproto[6];
}
bool EBRCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class game_item_t::_Internal {
 public:
};

game_item_t::game_item_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ProtoMsg.game_item_t)
}
game_item_t::game_item_t(const game_item_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiid_, &from.uiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lltime_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(lltime_));
  // @@protoc_insertion_point(copy_constructor:ProtoMsg.game_item_t)
}

inline void game_item_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lltime_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(lltime_));
}

game_item_t::~game_item_t() {
  // @@protoc_insertion_point(destructor:ProtoMsg.game_item_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void game_item_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void game_item_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void game_item_t::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMsg.game_item_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lltime_) -
      reinterpret_cast<char*>(&uiid_)) + sizeof(lltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* game_item_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uinum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 llTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* game_item_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMsg.game_item_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiid(), target);
  }

  // uint32 uiNum = 2;
  if (this->_internal_uinum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uinum(), target);
  }

  // int64 llTime = 3;
  if (this->_internal_lltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMsg.game_item_t)
  return target;
}

size_t game_item_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMsg.game_item_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiid());
  }

  // uint32 uiNum = 2;
  if (this->_internal_uinum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uinum());
  }

  // int64 llTime = 3;
  if (this->_internal_lltime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lltime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData game_item_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    game_item_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*game_item_t::GetClassData() const { return &_class_data_; }

void game_item_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<game_item_t *>(to)->MergeFrom(
      static_cast<const game_item_t &>(from));
}


void game_item_t::MergeFrom(const game_item_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMsg.game_item_t)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiid() != 0) {
    _internal_set_uiid(from._internal_uiid());
  }
  if (from._internal_uinum() != 0) {
    _internal_set_uinum(from._internal_uinum());
  }
  if (from._internal_lltime() != 0) {
    _internal_set_lltime(from._internal_lltime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void game_item_t::CopyFrom(const game_item_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMsg.game_item_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_item_t::IsInitialized() const {
  return true;
}

void game_item_t::InternalSwap(game_item_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(game_item_t, lltime_)
      + sizeof(game_item_t::lltime_)
      - PROTOBUF_FIELD_OFFSET(game_item_t, uiid_)>(
          reinterpret_cast<char*>(&uiid_),
          reinterpret_cast<char*>(&other->uiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata game_item_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcommon_2eproto_getter, &descriptor_table_msg_5fcommon_2eproto_once,
      file_level_metadata_msg_5fcommon_2eproto[0]);
}

// ===================================================================

class hero_common_info_t::_Internal {
 public:
};

hero_common_info_t::hero_common_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ProtoMsg.hero_common_info_t)
}
hero_common_info_t::hero_common_info_t(const hero_common_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iheroid_, &from.iheroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&istar_) -
    reinterpret_cast<char*>(&iheroid_)) + sizeof(istar_));
  // @@protoc_insertion_point(copy_constructor:ProtoMsg.hero_common_info_t)
}

inline void hero_common_info_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iheroid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&istar_) -
    reinterpret_cast<char*>(&iheroid_)) + sizeof(istar_));
}

hero_common_info_t::~hero_common_info_t() {
  // @@protoc_insertion_point(destructor:ProtoMsg.hero_common_info_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void hero_common_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void hero_common_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void hero_common_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMsg.hero_common_info_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iheroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&istar_) -
      reinterpret_cast<char*>(&iheroid_)) + sizeof(istar_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hero_common_info_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iHeroId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iheroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 iStar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          istar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* hero_common_info_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMsg.hero_common_info_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iHeroId = 1;
  if (this->_internal_iheroid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_iheroid(), target);
  }

  // int32 iLevel = 2;
  if (this->_internal_ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iStar = 3;
  if (this->_internal_istar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_istar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMsg.hero_common_info_t)
  return target;
}

size_t hero_common_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMsg.hero_common_info_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iHeroId = 1;
  if (this->_internal_iheroid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iheroid());
  }

  // int32 iLevel = 2;
  if (this->_internal_ilevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ilevel());
  }

  // int32 iStar = 3;
  if (this->_internal_istar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_istar());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData hero_common_info_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    hero_common_info_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*hero_common_info_t::GetClassData() const { return &_class_data_; }

void hero_common_info_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<hero_common_info_t *>(to)->MergeFrom(
      static_cast<const hero_common_info_t &>(from));
}


void hero_common_info_t::MergeFrom(const hero_common_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMsg.hero_common_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iheroid() != 0) {
    _internal_set_iheroid(from._internal_iheroid());
  }
  if (from._internal_ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from._internal_istar() != 0) {
    _internal_set_istar(from._internal_istar());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void hero_common_info_t::CopyFrom(const hero_common_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMsg.hero_common_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_common_info_t::IsInitialized() const {
  return true;
}

void hero_common_info_t::InternalSwap(hero_common_info_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hero_common_info_t, istar_)
      + sizeof(hero_common_info_t::istar_)
      - PROTOBUF_FIELD_OFFSET(hero_common_info_t, iheroid_)>(
          reinterpret_cast<char*>(&iheroid_),
          reinterpret_cast<char*>(&other->iheroid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hero_common_info_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcommon_2eproto_getter, &descriptor_table_msg_5fcommon_2eproto_once,
      file_level_metadata_msg_5fcommon_2eproto[1]);
}

// ===================================================================

class user_common_info_t::_Internal {
 public:
};

user_common_info_t::user_common_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecheros_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ProtoMsg.user_common_info_t)
}
user_common_info_t::user_common_info_t(const user_common_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecheros_(from.vecheros_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strname().empty()) {
    strname_.Set(from._internal_strname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lluid_, &from.lluid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iside_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(iside_));
  // @@protoc_insertion_point(copy_constructor:ProtoMsg.user_common_info_t)
}

inline void user_common_info_t::SharedCtor() {
strname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lluid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iside_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(iside_));
}

user_common_info_t::~user_common_info_t() {
  // @@protoc_insertion_point(destructor:ProtoMsg.user_common_info_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void user_common_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strname_.Destroy();
}

void user_common_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_common_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMsg.user_common_info_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecheros_.Clear();
  strname_.ClearToEmpty();
  ::memset(&lluid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iside_) -
      reinterpret_cast<char*>(&lluid_)) + sizeof(iside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_common_info_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 llUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lluid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 iPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ipos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProtoMsg.user_common_info_t.strName"));
        } else
          goto handle_unusual;
        continue;
      // int32 iLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProtoMsg.hero_common_info_t vecHeros = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecheros(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ProtoMsg.ERobotType eRobotType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_erobottype(static_cast<::ProtoMsg::ERobotType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 iSide = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          iside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* user_common_info_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMsg.user_common_info_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_lluid(), target);
  }

  // int32 iPos = 2;
  if (this->_internal_ipos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ipos(), target);
  }

  // string strName = 3;
  if (!this->_internal_strname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strname().data(), static_cast<int>(this->_internal_strname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoMsg.user_common_info_t.strName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strname(), target);
  }

  // int32 iLevel = 4;
  if (this->_internal_ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ilevel(), target);
  }

  // repeated .ProtoMsg.hero_common_info_t vecHeros = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecheros_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecheros(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ProtoMsg.ERobotType eRobotType = 6;
  if (this->_internal_erobottype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_erobottype(), target);
  }

  // int32 iSide = 7;
  if (this->_internal_iside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_iside(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMsg.user_common_info_t)
  return target;
}

size_t user_common_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMsg.user_common_info_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoMsg.hero_common_info_t vecHeros = 5;
  total_size += 1UL * this->_internal_vecheros_size();
  for (const auto& msg : this->vecheros_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string strName = 3;
  if (!this->_internal_strname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strname());
  }

  // int64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lluid());
  }

  // int32 iPos = 2;
  if (this->_internal_ipos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ipos());
  }

  // int32 iLevel = 4;
  if (this->_internal_ilevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ilevel());
  }

  // .ProtoMsg.ERobotType eRobotType = 6;
  if (this->_internal_erobottype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_erobottype());
  }

  // int32 iSide = 7;
  if (this->_internal_iside() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iside());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData user_common_info_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    user_common_info_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*user_common_info_t::GetClassData() const { return &_class_data_; }

void user_common_info_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<user_common_info_t *>(to)->MergeFrom(
      static_cast<const user_common_info_t &>(from));
}


void user_common_info_t::MergeFrom(const user_common_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMsg.user_common_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecheros_.MergeFrom(from.vecheros_);
  if (!from._internal_strname().empty()) {
    _internal_set_strname(from._internal_strname());
  }
  if (from._internal_lluid() != 0) {
    _internal_set_lluid(from._internal_lluid());
  }
  if (from._internal_ipos() != 0) {
    _internal_set_ipos(from._internal_ipos());
  }
  if (from._internal_ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from._internal_erobottype() != 0) {
    _internal_set_erobottype(from._internal_erobottype());
  }
  if (from._internal_iside() != 0) {
    _internal_set_iside(from._internal_iside());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void user_common_info_t::CopyFrom(const user_common_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMsg.user_common_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_common_info_t::IsInitialized() const {
  return true;
}

void user_common_info_t::InternalSwap(user_common_info_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecheros_.InternalSwap(&other->vecheros_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strname_, lhs_arena,
      &other->strname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_common_info_t, iside_)
      + sizeof(user_common_info_t::iside_)
      - PROTOBUF_FIELD_OFFSET(user_common_info_t, lluid_)>(
          reinterpret_cast<char*>(&lluid_),
          reinterpret_cast<char*>(&other->lluid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_common_info_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcommon_2eproto_getter, &descriptor_table_msg_5fcommon_2eproto_once,
      file_level_metadata_msg_5fcommon_2eproto[2]);
}

// ===================================================================

class user_battle_info_t::_Internal {
 public:
  static const ::ProtoMsg::user_common_info_t& ouserinfo(const user_battle_info_t* msg);
};

const ::ProtoMsg::user_common_info_t&
user_battle_info_t::_Internal::ouserinfo(const user_battle_info_t* msg) {
  return *msg->ouserinfo_;
}
user_battle_info_t::user_battle_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ProtoMsg.user_battle_info_t)
}
user_battle_info_t::user_battle_info_t(const user_battle_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strusersessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strusersessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strusersessionid().empty()) {
    strusersessionid_.Set(from._internal_strusersessionid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ouserinfo()) {
    ouserinfo_ = new ::ProtoMsg::user_common_info_t(*from.ouserinfo_);
  } else {
    ouserinfo_ = nullptr;
  }
  ::memcpy(&imatchsec_, &from.imatchsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&iconvid_) -
    reinterpret_cast<char*>(&imatchsec_)) + sizeof(iconvid_));
  // @@protoc_insertion_point(copy_constructor:ProtoMsg.user_battle_info_t)
}

inline void user_battle_info_t::SharedCtor() {
strusersessionid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strusersessionid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ouserinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iconvid_) -
    reinterpret_cast<char*>(&ouserinfo_)) + sizeof(iconvid_));
}

user_battle_info_t::~user_battle_info_t() {
  // @@protoc_insertion_point(destructor:ProtoMsg.user_battle_info_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void user_battle_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strusersessionid_.Destroy();
  if (this != internal_default_instance()) delete ouserinfo_;
}

void user_battle_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_battle_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMsg.user_battle_info_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strusersessionid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && ouserinfo_ != nullptr) {
    delete ouserinfo_;
  }
  ouserinfo_ = nullptr;
  ::memset(&imatchsec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iconvid_) -
      reinterpret_cast<char*>(&imatchsec_)) + sizeof(iconvid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_battle_info_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strUserSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strusersessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProtoMsg.user_battle_info_t.strUserSessionId"));
        } else
          goto handle_unusual;
        continue;
      // .ProtoMsg.user_common_info_t oUserInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ouserinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 iMatchSec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          imatchsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bOb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 iConvId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          iconvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* user_battle_info_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMsg.user_battle_info_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string strUserSessionId = 1;
  if (!this->_internal_strusersessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strusersessionid().data(), static_cast<int>(this->_internal_strusersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoMsg.user_battle_info_t.strUserSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strusersessionid(), target);
  }

  // .ProtoMsg.user_common_info_t oUserInfo = 2;
  if (this->_internal_has_ouserinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ouserinfo(this),
        _Internal::ouserinfo(this).GetCachedSize(), target, stream);
  }

  // int32 iMatchSec = 3;
  if (this->_internal_imatchsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_imatchsec(), target);
  }

  // bool bOb = 4;
  if (this->_internal_bob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bob(), target);
  }

  // int32 iConvId = 5;
  if (this->_internal_iconvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_iconvid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMsg.user_battle_info_t)
  return target;
}

size_t user_battle_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMsg.user_battle_info_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strUserSessionId = 1;
  if (!this->_internal_strusersessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strusersessionid());
  }

  // .ProtoMsg.user_common_info_t oUserInfo = 2;
  if (this->_internal_has_ouserinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ouserinfo_);
  }

  // int32 iMatchSec = 3;
  if (this->_internal_imatchsec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_imatchsec());
  }

  // bool bOb = 4;
  if (this->_internal_bob() != 0) {
    total_size += 1 + 1;
  }

  // int32 iConvId = 5;
  if (this->_internal_iconvid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iconvid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData user_battle_info_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    user_battle_info_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*user_battle_info_t::GetClassData() const { return &_class_data_; }

void user_battle_info_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<user_battle_info_t *>(to)->MergeFrom(
      static_cast<const user_battle_info_t &>(from));
}


void user_battle_info_t::MergeFrom(const user_battle_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMsg.user_battle_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strusersessionid().empty()) {
    _internal_set_strusersessionid(from._internal_strusersessionid());
  }
  if (from._internal_has_ouserinfo()) {
    _internal_mutable_ouserinfo()->::ProtoMsg::user_common_info_t::MergeFrom(from._internal_ouserinfo());
  }
  if (from._internal_imatchsec() != 0) {
    _internal_set_imatchsec(from._internal_imatchsec());
  }
  if (from._internal_bob() != 0) {
    _internal_set_bob(from._internal_bob());
  }
  if (from._internal_iconvid() != 0) {
    _internal_set_iconvid(from._internal_iconvid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void user_battle_info_t::CopyFrom(const user_battle_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMsg.user_battle_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_battle_info_t::IsInitialized() const {
  return true;
}

void user_battle_info_t::InternalSwap(user_battle_info_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strusersessionid_, lhs_arena,
      &other->strusersessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_battle_info_t, iconvid_)
      + sizeof(user_battle_info_t::iconvid_)
      - PROTOBUF_FIELD_OFFSET(user_battle_info_t, ouserinfo_)>(
          reinterpret_cast<char*>(&ouserinfo_),
          reinterpret_cast<char*>(&other->ouserinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_battle_info_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcommon_2eproto_getter, &descriptor_table_msg_5fcommon_2eproto_once,
      file_level_metadata_msg_5fcommon_2eproto[3]);
}

// ===================================================================

class user_battle_result_t::_Internal {
 public:
};

user_battle_result_t::user_battle_result_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ProtoMsg.user_battle_result_t)
}
user_battle_result_t::user_battle_result_t(const user_battle_result_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lluid_, &from.lluid_,
    static_cast<size_t>(reinterpret_cast<char*>(&llendtime_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(llendtime_));
  // @@protoc_insertion_point(copy_constructor:ProtoMsg.user_battle_result_t)
}

inline void user_battle_result_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lluid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&llendtime_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(llendtime_));
}

user_battle_result_t::~user_battle_result_t() {
  // @@protoc_insertion_point(destructor:ProtoMsg.user_battle_result_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void user_battle_result_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void user_battle_result_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_battle_result_t::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMsg.user_battle_result_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lluid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llendtime_) -
      reinterpret_cast<char*>(&lluid_)) + sizeof(llendtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_battle_result_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 llUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lluid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 iPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          iposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProtoMsg.EBattleResult eResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eresult(static_cast<::ProtoMsg::EBattleResult>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 llEndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          llendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* user_battle_result_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMsg.user_battle_result_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_lluid(), target);
  }

  // int32 iPosition = 2;
  if (this->_internal_iposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_iposition(), target);
  }

  // .ProtoMsg.EBattleResult eResult = 3;
  if (this->_internal_eresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_eresult(), target);
  }

  // int64 llEndTime = 4;
  if (this->_internal_llendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_llendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMsg.user_battle_result_t)
  return target;
}

size_t user_battle_result_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMsg.user_battle_result_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lluid());
  }

  // int32 iPosition = 2;
  if (this->_internal_iposition() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iposition());
  }

  // .ProtoMsg.EBattleResult eResult = 3;
  if (this->_internal_eresult() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_eresult());
  }

  // int64 llEndTime = 4;
  if (this->_internal_llendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_llendtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData user_battle_result_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    user_battle_result_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*user_battle_result_t::GetClassData() const { return &_class_data_; }

void user_battle_result_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<user_battle_result_t *>(to)->MergeFrom(
      static_cast<const user_battle_result_t &>(from));
}


void user_battle_result_t::MergeFrom(const user_battle_result_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMsg.user_battle_result_t)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lluid() != 0) {
    _internal_set_lluid(from._internal_lluid());
  }
  if (from._internal_iposition() != 0) {
    _internal_set_iposition(from._internal_iposition());
  }
  if (from._internal_eresult() != 0) {
    _internal_set_eresult(from._internal_eresult());
  }
  if (from._internal_llendtime() != 0) {
    _internal_set_llendtime(from._internal_llendtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void user_battle_result_t::CopyFrom(const user_battle_result_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMsg.user_battle_result_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_battle_result_t::IsInitialized() const {
  return true;
}

void user_battle_result_t::InternalSwap(user_battle_result_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_battle_result_t, llendtime_)
      + sizeof(user_battle_result_t::llendtime_)
      - PROTOBUF_FIELD_OFFSET(user_battle_result_t, lluid_)>(
          reinterpret_cast<char*>(&lluid_),
          reinterpret_cast<char*>(&other->lluid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_battle_result_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcommon_2eproto_getter, &descriptor_table_msg_5fcommon_2eproto_once,
      file_level_metadata_msg_5fcommon_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoMsg::game_item_t*
Arena::CreateMaybeMessage< ::ProtoMsg::game_item_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMsg::game_item_t >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMsg::hero_common_info_t*
Arena::CreateMaybeMessage< ::ProtoMsg::hero_common_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMsg::hero_common_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMsg::user_common_info_t*
Arena::CreateMaybeMessage< ::ProtoMsg::user_common_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMsg::user_common_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMsg::user_battle_info_t*
Arena::CreateMaybeMessage< ::ProtoMsg::user_battle_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMsg::user_battle_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMsg::user_battle_result_t*
Arena::CreateMaybeMessage< ::ProtoMsg::user_battle_result_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMsg::user_battle_result_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
