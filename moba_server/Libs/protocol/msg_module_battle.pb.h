// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_module_battle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fbattle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fbattle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg_common.pb.h"
#include "result_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fmodule_5fbattle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fmodule_5fbattle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fmodule_5fbattle_2eproto;
namespace ProtoMsg {
class MsgModule_Battle;
struct MsgModule_BattleDefaultTypeInternal;
extern MsgModule_BattleDefaultTypeInternal _MsgModule_Battle_default_instance_;
class Msg_Battle_Beat_Req;
struct Msg_Battle_Beat_ReqDefaultTypeInternal;
extern Msg_Battle_Beat_ReqDefaultTypeInternal _Msg_Battle_Beat_Req_default_instance_;
class Msg_Battle_Beat_Rsp;
struct Msg_Battle_Beat_RspDefaultTypeInternal;
extern Msg_Battle_Beat_RspDefaultTypeInternal _Msg_Battle_Beat_Rsp_default_instance_;
class Msg_Battle_EnterRoom_Req;
struct Msg_Battle_EnterRoom_ReqDefaultTypeInternal;
extern Msg_Battle_EnterRoom_ReqDefaultTypeInternal _Msg_Battle_EnterRoom_Req_default_instance_;
class Msg_Battle_EnterRoom_Rsp;
struct Msg_Battle_EnterRoom_RspDefaultTypeInternal;
extern Msg_Battle_EnterRoom_RspDefaultTypeInternal _Msg_Battle_EnterRoom_Rsp_default_instance_;
class Msg_Battle_Error_Notify;
struct Msg_Battle_Error_NotifyDefaultTypeInternal;
extern Msg_Battle_Error_NotifyDefaultTypeInternal _Msg_Battle_Error_Notify_default_instance_;
class Msg_Battle_OverRoom_Req;
struct Msg_Battle_OverRoom_ReqDefaultTypeInternal;
extern Msg_Battle_OverRoom_ReqDefaultTypeInternal _Msg_Battle_OverRoom_Req_default_instance_;
class Msg_Battle_OverRoom_Rsp;
struct Msg_Battle_OverRoom_RspDefaultTypeInternal;
extern Msg_Battle_OverRoom_RspDefaultTypeInternal _Msg_Battle_OverRoom_Rsp_default_instance_;
class Msg_Battle_Result_Notify;
struct Msg_Battle_Result_NotifyDefaultTypeInternal;
extern Msg_Battle_Result_NotifyDefaultTypeInternal _Msg_Battle_Result_Notify_default_instance_;
class Msg_RoomHeartbeat_Notify;
struct Msg_RoomHeartbeat_NotifyDefaultTypeInternal;
extern Msg_RoomHeartbeat_NotifyDefaultTypeInternal _Msg_RoomHeartbeat_Notify_default_instance_;
class Msg_RoomLoadProgress_Notify;
struct Msg_RoomLoadProgress_NotifyDefaultTypeInternal;
extern Msg_RoomLoadProgress_NotifyDefaultTypeInternal _Msg_RoomLoadProgress_Notify_default_instance_;
class Msg_RoomStart_Notify;
struct Msg_RoomStart_NotifyDefaultTypeInternal;
extern Msg_RoomStart_NotifyDefaultTypeInternal _Msg_RoomStart_Notify_default_instance_;
class battle_order_t;
struct battle_order_tDefaultTypeInternal;
extern battle_order_tDefaultTypeInternal _battle_order_t_default_instance_;
class battle_room_info_t;
struct battle_room_info_tDefaultTypeInternal;
extern battle_room_info_tDefaultTypeInternal _battle_room_info_t_default_instance_;
class load_progress_info_t;
struct load_progress_info_tDefaultTypeInternal;
extern load_progress_info_tDefaultTypeInternal _load_progress_info_t_default_instance_;
}  // namespace ProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMsg::MsgModule_Battle* Arena::CreateMaybeMessage<::ProtoMsg::MsgModule_Battle>(Arena*);
template<> ::ProtoMsg::Msg_Battle_Beat_Req* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_Beat_Req>(Arena*);
template<> ::ProtoMsg::Msg_Battle_Beat_Rsp* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_Beat_Rsp>(Arena*);
template<> ::ProtoMsg::Msg_Battle_EnterRoom_Req* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_EnterRoom_Req>(Arena*);
template<> ::ProtoMsg::Msg_Battle_EnterRoom_Rsp* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_EnterRoom_Rsp>(Arena*);
template<> ::ProtoMsg::Msg_Battle_Error_Notify* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_Error_Notify>(Arena*);
template<> ::ProtoMsg::Msg_Battle_OverRoom_Req* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_OverRoom_Req>(Arena*);
template<> ::ProtoMsg::Msg_Battle_OverRoom_Rsp* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_OverRoom_Rsp>(Arena*);
template<> ::ProtoMsg::Msg_Battle_Result_Notify* Arena::CreateMaybeMessage<::ProtoMsg::Msg_Battle_Result_Notify>(Arena*);
template<> ::ProtoMsg::Msg_RoomHeartbeat_Notify* Arena::CreateMaybeMessage<::ProtoMsg::Msg_RoomHeartbeat_Notify>(Arena*);
template<> ::ProtoMsg::Msg_RoomLoadProgress_Notify* Arena::CreateMaybeMessage<::ProtoMsg::Msg_RoomLoadProgress_Notify>(Arena*);
template<> ::ProtoMsg::Msg_RoomStart_Notify* Arena::CreateMaybeMessage<::ProtoMsg::Msg_RoomStart_Notify>(Arena*);
template<> ::ProtoMsg::battle_order_t* Arena::CreateMaybeMessage<::ProtoMsg::battle_order_t>(Arena*);
template<> ::ProtoMsg::battle_room_info_t* Arena::CreateMaybeMessage<::ProtoMsg::battle_room_info_t>(Arena*);
template<> ::ProtoMsg::load_progress_info_t* Arena::CreateMaybeMessage<::ProtoMsg::load_progress_info_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMsg {

enum MsgModule_Battle_MsgCmd : int {
  MsgModule_Battle_MsgCmd_Msg_Battle_None = 0,
  MsgModule_Battle_MsgCmd_Msg_Battle_RoomHeartbeat_Rsp = 1,
  MsgModule_Battle_MsgCmd_Msg_Battle_EnterRoom_Req = 2,
  MsgModule_Battle_MsgCmd_Msg_Battle_EnterRoom_Rsp = 3,
  MsgModule_Battle_MsgCmd_Msg_Battle_StartRoom_Req = 4,
  MsgModule_Battle_MsgCmd_Msg_Battle_StartRoom_Rsp = 5,
  MsgModule_Battle_MsgCmd_Msg_Battle_OrderRoom_Req = 6,
  MsgModule_Battle_MsgCmd_Msg_Battle_OrderRoom_Rsp = 7,
  MsgModule_Battle_MsgCmd_Msg_Battle_QuitRoom_Req = 8,
  MsgModule_Battle_MsgCmd_Msg_Battle_QuitRoom_Rsp = 9,
  MsgModule_Battle_MsgCmd_Msg_Battle_PauseRoom_Req = 10,
  MsgModule_Battle_MsgCmd_Msg_Battle_PauseRoom_Rsp = 11,
  MsgModule_Battle_MsgCmd_Msg_Battle_RecoverRoom_Req = 12,
  MsgModule_Battle_MsgCmd_Msg_Battle_RecoverRoom_Rsp = 13,
  MsgModule_Battle_MsgCmd_Msg_Battle_Result_Notify = 14,
  MsgModule_Battle_MsgCmd_Msg_Battle_OverRoom_Req = 15,
  MsgModule_Battle_MsgCmd_Msg_Battle_OverRoom_Rsp = 16,
  MsgModule_Battle_MsgCmd_Msg_Battle_GetRoomOrders_Req = 17,
  MsgModule_Battle_MsgCmd_Msg_Battle_GetRoomOrders_Rsp = 18,
  MsgModule_Battle_MsgCmd_Msg_Battle_SyncOrdersOver_Req = 19,
  MsgModule_Battle_MsgCmd_Msg_Battle_SyncOrdersOver_Rsp = 20,
  MsgModule_Battle_MsgCmd_Msg_Battle_Error_Notify = 21,
  MsgModule_Battle_MsgCmd_Msg_Battle_Beat_Req = 22,
  MsgModule_Battle_MsgCmd_Msg_Battle_Beat_Rsp = 23,
  MsgModule_Battle_MsgCmd_Msg_RoomLoadProgress_Submit = 24,
  MsgModule_Battle_MsgCmd_Msg_RoomLoadProgress_Notify = 25,
  MsgModule_Battle_MsgCmd_Msg_RoomHeartbeat_Notify = 26,
  MsgModule_Battle_MsgCmd_Msg_RoomStart_Notify = 27,
  MsgModule_Battle_MsgCmd_MsgModule_Battle_MsgCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgModule_Battle_MsgCmd_MsgModule_Battle_MsgCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgModule_Battle_MsgCmd_IsValid(int value);
constexpr MsgModule_Battle_MsgCmd MsgModule_Battle_MsgCmd_MsgCmd_MIN = MsgModule_Battle_MsgCmd_Msg_Battle_None;
constexpr MsgModule_Battle_MsgCmd MsgModule_Battle_MsgCmd_MsgCmd_MAX = MsgModule_Battle_MsgCmd_Msg_RoomStart_Notify;
constexpr int MsgModule_Battle_MsgCmd_MsgCmd_ARRAYSIZE = MsgModule_Battle_MsgCmd_MsgCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgModule_Battle_MsgCmd_descriptor();
template<typename T>
inline const std::string& MsgModule_Battle_MsgCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgModule_Battle_MsgCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgModule_Battle_MsgCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgModule_Battle_MsgCmd_descriptor(), enum_t_value);
}
inline bool MsgModule_Battle_MsgCmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgModule_Battle_MsgCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgModule_Battle_MsgCmd>(
    MsgModule_Battle_MsgCmd_descriptor(), name, value);
}
// ===================================================================

class MsgModule_Battle final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.MsgModule_Battle) */ {
 public:
  inline MsgModule_Battle() : MsgModule_Battle(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MsgModule_Battle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgModule_Battle(const MsgModule_Battle& from);
  MsgModule_Battle(MsgModule_Battle&& from) noexcept
    : MsgModule_Battle() {
    *this = ::std::move(from);
  }

  inline MsgModule_Battle& operator=(const MsgModule_Battle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgModule_Battle& operator=(MsgModule_Battle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgModule_Battle& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgModule_Battle* internal_default_instance() {
    return reinterpret_cast<const MsgModule_Battle*>(
               &_MsgModule_Battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgModule_Battle& a, MsgModule_Battle& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgModule_Battle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgModule_Battle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgModule_Battle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgModule_Battle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgModule_Battle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgModule_Battle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.MsgModule_Battle";
  }
  protected:
  explicit MsgModule_Battle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgModule_Battle_MsgCmd MsgCmd;
  static constexpr MsgCmd Msg_Battle_None =
    MsgModule_Battle_MsgCmd_Msg_Battle_None;
  static constexpr MsgCmd Msg_Battle_RoomHeartbeat_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_RoomHeartbeat_Rsp;
  static constexpr MsgCmd Msg_Battle_EnterRoom_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_EnterRoom_Req;
  static constexpr MsgCmd Msg_Battle_EnterRoom_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_EnterRoom_Rsp;
  static constexpr MsgCmd Msg_Battle_StartRoom_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_StartRoom_Req;
  static constexpr MsgCmd Msg_Battle_StartRoom_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_StartRoom_Rsp;
  static constexpr MsgCmd Msg_Battle_OrderRoom_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_OrderRoom_Req;
  static constexpr MsgCmd Msg_Battle_OrderRoom_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_OrderRoom_Rsp;
  static constexpr MsgCmd Msg_Battle_QuitRoom_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_QuitRoom_Req;
  static constexpr MsgCmd Msg_Battle_QuitRoom_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_QuitRoom_Rsp;
  static constexpr MsgCmd Msg_Battle_PauseRoom_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_PauseRoom_Req;
  static constexpr MsgCmd Msg_Battle_PauseRoom_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_PauseRoom_Rsp;
  static constexpr MsgCmd Msg_Battle_RecoverRoom_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_RecoverRoom_Req;
  static constexpr MsgCmd Msg_Battle_RecoverRoom_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_RecoverRoom_Rsp;
  static constexpr MsgCmd Msg_Battle_Result_Notify =
    MsgModule_Battle_MsgCmd_Msg_Battle_Result_Notify;
  static constexpr MsgCmd Msg_Battle_OverRoom_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_OverRoom_Req;
  static constexpr MsgCmd Msg_Battle_OverRoom_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_OverRoom_Rsp;
  static constexpr MsgCmd Msg_Battle_GetRoomOrders_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_GetRoomOrders_Req;
  static constexpr MsgCmd Msg_Battle_GetRoomOrders_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_GetRoomOrders_Rsp;
  static constexpr MsgCmd Msg_Battle_SyncOrdersOver_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_SyncOrdersOver_Req;
  static constexpr MsgCmd Msg_Battle_SyncOrdersOver_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_SyncOrdersOver_Rsp;
  static constexpr MsgCmd Msg_Battle_Error_Notify =
    MsgModule_Battle_MsgCmd_Msg_Battle_Error_Notify;
  static constexpr MsgCmd Msg_Battle_Beat_Req =
    MsgModule_Battle_MsgCmd_Msg_Battle_Beat_Req;
  static constexpr MsgCmd Msg_Battle_Beat_Rsp =
    MsgModule_Battle_MsgCmd_Msg_Battle_Beat_Rsp;
  static constexpr MsgCmd Msg_RoomLoadProgress_Submit =
    MsgModule_Battle_MsgCmd_Msg_RoomLoadProgress_Submit;
  static constexpr MsgCmd Msg_RoomLoadProgress_Notify =
    MsgModule_Battle_MsgCmd_Msg_RoomLoadProgress_Notify;
  static constexpr MsgCmd Msg_RoomHeartbeat_Notify =
    MsgModule_Battle_MsgCmd_Msg_RoomHeartbeat_Notify;
  static constexpr MsgCmd Msg_RoomStart_Notify =
    MsgModule_Battle_MsgCmd_Msg_RoomStart_Notify;
  static inline bool MsgCmd_IsValid(int value) {
    return MsgModule_Battle_MsgCmd_IsValid(value);
  }
  static constexpr MsgCmd MsgCmd_MIN =
    MsgModule_Battle_MsgCmd_MsgCmd_MIN;
  static constexpr MsgCmd MsgCmd_MAX =
    MsgModule_Battle_MsgCmd_MsgCmd_MAX;
  static constexpr int MsgCmd_ARRAYSIZE =
    MsgModule_Battle_MsgCmd_MsgCmd_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgCmd_descriptor() {
    return MsgModule_Battle_MsgCmd_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgCmd_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgCmd>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgCmd_Name.");
    return MsgModule_Battle_MsgCmd_Name(enum_t_value);
  }
  static inline bool MsgCmd_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgCmd* value) {
    return MsgModule_Battle_MsgCmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.MsgModule_Battle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_Beat_Req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_Beat_Req) */ {
 public:
  inline Msg_Battle_Beat_Req() : Msg_Battle_Beat_Req(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Msg_Battle_Beat_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_Beat_Req(const Msg_Battle_Beat_Req& from);
  Msg_Battle_Beat_Req(Msg_Battle_Beat_Req&& from) noexcept
    : Msg_Battle_Beat_Req() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_Beat_Req& operator=(const Msg_Battle_Beat_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_Beat_Req& operator=(Msg_Battle_Beat_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_Beat_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_Beat_Req* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_Beat_Req*>(
               &_Msg_Battle_Beat_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_Battle_Beat_Req& a, Msg_Battle_Beat_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_Beat_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_Beat_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_Beat_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_Beat_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_Battle_Beat_Req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_Battle_Beat_Req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_Beat_Req";
  }
  protected:
  explicit Msg_Battle_Beat_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_Beat_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_Beat_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_Beat_Rsp) */ {
 public:
  inline Msg_Battle_Beat_Rsp() : Msg_Battle_Beat_Rsp(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Msg_Battle_Beat_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_Beat_Rsp(const Msg_Battle_Beat_Rsp& from);
  Msg_Battle_Beat_Rsp(Msg_Battle_Beat_Rsp&& from) noexcept
    : Msg_Battle_Beat_Rsp() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_Beat_Rsp& operator=(const Msg_Battle_Beat_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_Beat_Rsp& operator=(Msg_Battle_Beat_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_Beat_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_Beat_Rsp* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_Beat_Rsp*>(
               &_Msg_Battle_Beat_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_Battle_Beat_Rsp& a, Msg_Battle_Beat_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_Beat_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_Beat_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_Beat_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_Beat_Rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_Battle_Beat_Rsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_Battle_Beat_Rsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_Beat_Rsp";
  }
  protected:
  explicit Msg_Battle_Beat_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_Beat_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_EnterRoom_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_EnterRoom_Req) */ {
 public:
  inline Msg_Battle_EnterRoom_Req() : Msg_Battle_EnterRoom_Req(nullptr) {}
  ~Msg_Battle_EnterRoom_Req() override;
  explicit PROTOBUF_CONSTEXPR Msg_Battle_EnterRoom_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_EnterRoom_Req(const Msg_Battle_EnterRoom_Req& from);
  Msg_Battle_EnterRoom_Req(Msg_Battle_EnterRoom_Req&& from) noexcept
    : Msg_Battle_EnterRoom_Req() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_EnterRoom_Req& operator=(const Msg_Battle_EnterRoom_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_EnterRoom_Req& operator=(Msg_Battle_EnterRoom_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_EnterRoom_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_EnterRoom_Req* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_EnterRoom_Req*>(
               &_Msg_Battle_EnterRoom_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_Battle_EnterRoom_Req& a, Msg_Battle_EnterRoom_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_EnterRoom_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_EnterRoom_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_EnterRoom_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_EnterRoom_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Battle_EnterRoom_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Battle_EnterRoom_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Battle_EnterRoom_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_EnterRoom_Req";
  }
  protected:
  explicit Msg_Battle_EnterRoom_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRoomSessionIdFieldNumber = 1,
    kStrUserSessionIdFieldNumber = 2,
  };
  // string strRoomSessionId = 1;
  void clear_strroomsessionid();
  const std::string& strroomsessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strroomsessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strroomsessionid();
  PROTOBUF_NODISCARD std::string* release_strroomsessionid();
  void set_allocated_strroomsessionid(std::string* strroomsessionid);
  private:
  const std::string& _internal_strroomsessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strroomsessionid(const std::string& value);
  std::string* _internal_mutable_strroomsessionid();
  public:

  // string strUserSessionId = 2;
  void clear_strusersessionid();
  const std::string& strusersessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strusersessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strusersessionid();
  PROTOBUF_NODISCARD std::string* release_strusersessionid();
  void set_allocated_strusersessionid(std::string* strusersessionid);
  private:
  const std::string& _internal_strusersessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strusersessionid(const std::string& value);
  std::string* _internal_mutable_strusersessionid();
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_EnterRoom_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strroomsessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strusersessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_EnterRoom_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_EnterRoom_Rsp) */ {
 public:
  inline Msg_Battle_EnterRoom_Rsp() : Msg_Battle_EnterRoom_Rsp(nullptr) {}
  ~Msg_Battle_EnterRoom_Rsp() override;
  explicit PROTOBUF_CONSTEXPR Msg_Battle_EnterRoom_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_EnterRoom_Rsp(const Msg_Battle_EnterRoom_Rsp& from);
  Msg_Battle_EnterRoom_Rsp(Msg_Battle_EnterRoom_Rsp&& from) noexcept
    : Msg_Battle_EnterRoom_Rsp() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_EnterRoom_Rsp& operator=(const Msg_Battle_EnterRoom_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_EnterRoom_Rsp& operator=(Msg_Battle_EnterRoom_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_EnterRoom_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_EnterRoom_Rsp* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_EnterRoom_Rsp*>(
               &_Msg_Battle_EnterRoom_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_Battle_EnterRoom_Rsp& a, Msg_Battle_EnterRoom_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_EnterRoom_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_EnterRoom_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_EnterRoom_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_EnterRoom_Rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Battle_EnterRoom_Rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Battle_EnterRoom_Rsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Battle_EnterRoom_Rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_EnterRoom_Rsp";
  }
  protected:
  explicit Msg_Battle_EnterRoom_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrMapNameFieldNumber = 2,
    kETypeFieldNumber = 1,
    kIRandSeedFieldNumber = 3,
    kEStatusFieldNumber = 4,
    kIRoomTimeFieldNumber = 5,
    kIStartTimeFieldNumber = 6,
  };
  // string strMapName = 2;
  void clear_strmapname();
  const std::string& strmapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strmapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strmapname();
  PROTOBUF_NODISCARD std::string* release_strmapname();
  void set_allocated_strmapname(std::string* strmapname);
  private:
  const std::string& _internal_strmapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strmapname(const std::string& value);
  std::string* _internal_mutable_strmapname();
  public:

  // .ProtoMsg.ERoomType eType = 1;
  void clear_etype();
  ::ProtoMsg::ERoomType etype() const;
  void set_etype(::ProtoMsg::ERoomType value);
  private:
  ::ProtoMsg::ERoomType _internal_etype() const;
  void _internal_set_etype(::ProtoMsg::ERoomType value);
  public:

  // int32 iRandSeed = 3;
  void clear_irandseed();
  int32_t irandseed() const;
  void set_irandseed(int32_t value);
  private:
  int32_t _internal_irandseed() const;
  void _internal_set_irandseed(int32_t value);
  public:

  // .ProtoMsg.ERoomStatus eStatus = 4;
  void clear_estatus();
  ::ProtoMsg::ERoomStatus estatus() const;
  void set_estatus(::ProtoMsg::ERoomStatus value);
  private:
  ::ProtoMsg::ERoomStatus _internal_estatus() const;
  void _internal_set_estatus(::ProtoMsg::ERoomStatus value);
  public:

  // int32 iRoomTime = 5;
  void clear_iroomtime();
  int32_t iroomtime() const;
  void set_iroomtime(int32_t value);
  private:
  int32_t _internal_iroomtime() const;
  void _internal_set_iroomtime(int32_t value);
  public:

  // int32 iStartTime = 6;
  void clear_istarttime();
  int32_t istarttime() const;
  void set_istarttime(int32_t value);
  private:
  int32_t _internal_istarttime() const;
  void _internal_set_istarttime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_EnterRoom_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strmapname_;
  int etype_;
  int32_t irandseed_;
  int estatus_;
  int32_t iroomtime_;
  int32_t istarttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_Error_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_Error_Notify) */ {
 public:
  inline Msg_Battle_Error_Notify() : Msg_Battle_Error_Notify(nullptr) {}
  ~Msg_Battle_Error_Notify() override;
  explicit PROTOBUF_CONSTEXPR Msg_Battle_Error_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_Error_Notify(const Msg_Battle_Error_Notify& from);
  Msg_Battle_Error_Notify(Msg_Battle_Error_Notify&& from) noexcept
    : Msg_Battle_Error_Notify() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_Error_Notify& operator=(const Msg_Battle_Error_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_Error_Notify& operator=(Msg_Battle_Error_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_Error_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_Error_Notify* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_Error_Notify*>(
               &_Msg_Battle_Error_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_Battle_Error_Notify& a, Msg_Battle_Error_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_Error_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_Error_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_Error_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_Error_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Battle_Error_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Battle_Error_Notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Battle_Error_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_Error_Notify";
  }
  protected:
  explicit Msg_Battle_Error_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiModuleIdFieldNumber = 1,
    kUiCmdFieldNumber = 2,
    kEErrorCodeFieldNumber = 3,
  };
  // uint32 uiModuleId = 1;
  void clear_uimoduleid();
  uint32_t uimoduleid() const;
  void set_uimoduleid(uint32_t value);
  private:
  uint32_t _internal_uimoduleid() const;
  void _internal_set_uimoduleid(uint32_t value);
  public:

  // uint32 uiCmd = 2;
  void clear_uicmd();
  uint32_t uicmd() const;
  void set_uicmd(uint32_t value);
  private:
  uint32_t _internal_uicmd() const;
  void _internal_set_uicmd(uint32_t value);
  public:

  // .ProtoMsg.ResultCode eErrorCode = 3;
  void clear_eerrorcode();
  ::ProtoMsg::ResultCode eerrorcode() const;
  void set_eerrorcode(::ProtoMsg::ResultCode value);
  private:
  ::ProtoMsg::ResultCode _internal_eerrorcode() const;
  void _internal_set_eerrorcode(::ProtoMsg::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_Error_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uimoduleid_;
  uint32_t uicmd_;
  int eerrorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class battle_room_info_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.battle_room_info_t) */ {
 public:
  inline battle_room_info_t() : battle_room_info_t(nullptr) {}
  ~battle_room_info_t() override;
  explicit PROTOBUF_CONSTEXPR battle_room_info_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  battle_room_info_t(const battle_room_info_t& from);
  battle_room_info_t(battle_room_info_t&& from) noexcept
    : battle_room_info_t() {
    *this = ::std::move(from);
  }

  inline battle_room_info_t& operator=(const battle_room_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline battle_room_info_t& operator=(battle_room_info_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const battle_room_info_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const battle_room_info_t* internal_default_instance() {
    return reinterpret_cast<const battle_room_info_t*>(
               &_battle_room_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(battle_room_info_t& a, battle_room_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(battle_room_info_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(battle_room_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  battle_room_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<battle_room_info_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const battle_room_info_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const battle_room_info_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(battle_room_info_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.battle_room_info_t";
  }
  protected:
  explicit battle_room_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrSessionFieldNumber = 1,
    kMapNameFieldNumber = 3,
    kERoomTypeFieldNumber = 2,
  };
  // string strSession = 1;
  void clear_strsession();
  const std::string& strsession() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strsession(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strsession();
  PROTOBUF_NODISCARD std::string* release_strsession();
  void set_allocated_strsession(std::string* strsession);
  private:
  const std::string& _internal_strsession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strsession(const std::string& value);
  std::string* _internal_mutable_strsession();
  public:

  // string mapName = 3;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // .ProtoMsg.ERoomType eRoomType = 2;
  void clear_eroomtype();
  ::ProtoMsg::ERoomType eroomtype() const;
  void set_eroomtype(::ProtoMsg::ERoomType value);
  private:
  ::ProtoMsg::ERoomType _internal_eroomtype() const;
  void _internal_set_eroomtype(::ProtoMsg::ERoomType value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.battle_room_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strsession_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  int eroomtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class battle_order_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.battle_order_t) */ {
 public:
  inline battle_order_t() : battle_order_t(nullptr) {}
  ~battle_order_t() override;
  explicit PROTOBUF_CONSTEXPR battle_order_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  battle_order_t(const battle_order_t& from);
  battle_order_t(battle_order_t&& from) noexcept
    : battle_order_t() {
    *this = ::std::move(from);
  }

  inline battle_order_t& operator=(const battle_order_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline battle_order_t& operator=(battle_order_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const battle_order_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const battle_order_t* internal_default_instance() {
    return reinterpret_cast<const battle_order_t*>(
               &_battle_order_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(battle_order_t& a, battle_order_t& b) {
    a.Swap(&b);
  }
  inline void Swap(battle_order_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(battle_order_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  battle_order_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<battle_order_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const battle_order_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const battle_order_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(battle_order_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.battle_order_t";
  }
  protected:
  explicit battle_order_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIExecTimeFieldNumber = 1,
    kIUserIdFieldNumber = 2,
    kITypeFieldNumber = 3,
    kIArg1FieldNumber = 4,
    kIArg2FieldNumber = 5,
  };
  // int32 iExecTime = 1;
  void clear_iexectime();
  int32_t iexectime() const;
  void set_iexectime(int32_t value);
  private:
  int32_t _internal_iexectime() const;
  void _internal_set_iexectime(int32_t value);
  public:

  // int32 iUserId = 2;
  void clear_iuserid();
  int32_t iuserid() const;
  void set_iuserid(int32_t value);
  private:
  int32_t _internal_iuserid() const;
  void _internal_set_iuserid(int32_t value);
  public:

  // int32 iType = 3;
  void clear_itype();
  int32_t itype() const;
  void set_itype(int32_t value);
  private:
  int32_t _internal_itype() const;
  void _internal_set_itype(int32_t value);
  public:

  // int32 iArg1 = 4;
  void clear_iarg1();
  int32_t iarg1() const;
  void set_iarg1(int32_t value);
  private:
  int32_t _internal_iarg1() const;
  void _internal_set_iarg1(int32_t value);
  public:

  // int32 iArg2 = 5;
  void clear_iarg2();
  int32_t iarg2() const;
  void set_iarg2(int32_t value);
  private:
  int32_t _internal_iarg2() const;
  void _internal_set_iarg2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.battle_order_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t iexectime_;
  int32_t iuserid_;
  int32_t itype_;
  int32_t iarg1_;
  int32_t iarg2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_OverRoom_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_OverRoom_Req) */ {
 public:
  inline Msg_Battle_OverRoom_Req() : Msg_Battle_OverRoom_Req(nullptr) {}
  ~Msg_Battle_OverRoom_Req() override;
  explicit PROTOBUF_CONSTEXPR Msg_Battle_OverRoom_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_OverRoom_Req(const Msg_Battle_OverRoom_Req& from);
  Msg_Battle_OverRoom_Req(Msg_Battle_OverRoom_Req&& from) noexcept
    : Msg_Battle_OverRoom_Req() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_OverRoom_Req& operator=(const Msg_Battle_OverRoom_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_OverRoom_Req& operator=(Msg_Battle_OverRoom_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_OverRoom_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_OverRoom_Req* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_OverRoom_Req*>(
               &_Msg_Battle_OverRoom_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_Battle_OverRoom_Req& a, Msg_Battle_OverRoom_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_OverRoom_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_OverRoom_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_OverRoom_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_OverRoom_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Battle_OverRoom_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Battle_OverRoom_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Battle_OverRoom_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_OverRoom_Req";
  }
  protected:
  explicit Msg_Battle_OverRoom_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOUserDataFieldNumber = 1,
    kIKeyTypeFieldNumber = 2,
    kICrcFieldNumber = 3,
  };
  // bytes oUserData = 1;
  void clear_ouserdata();
  const std::string& ouserdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ouserdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ouserdata();
  PROTOBUF_NODISCARD std::string* release_ouserdata();
  void set_allocated_ouserdata(std::string* ouserdata);
  private:
  const std::string& _internal_ouserdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ouserdata(const std::string& value);
  std::string* _internal_mutable_ouserdata();
  public:

  // int32 iKeyType = 2;
  void clear_ikeytype();
  int32_t ikeytype() const;
  void set_ikeytype(int32_t value);
  private:
  int32_t _internal_ikeytype() const;
  void _internal_set_ikeytype(int32_t value);
  public:

  // int32 iCrc = 3;
  void clear_icrc();
  int32_t icrc() const;
  void set_icrc(int32_t value);
  private:
  int32_t _internal_icrc() const;
  void _internal_set_icrc(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_OverRoom_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ouserdata_;
  int32_t ikeytype_;
  int32_t icrc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_OverRoom_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_OverRoom_Rsp) */ {
 public:
  inline Msg_Battle_OverRoom_Rsp() : Msg_Battle_OverRoom_Rsp(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Msg_Battle_OverRoom_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_OverRoom_Rsp(const Msg_Battle_OverRoom_Rsp& from);
  Msg_Battle_OverRoom_Rsp(Msg_Battle_OverRoom_Rsp&& from) noexcept
    : Msg_Battle_OverRoom_Rsp() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_OverRoom_Rsp& operator=(const Msg_Battle_OverRoom_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_OverRoom_Rsp& operator=(Msg_Battle_OverRoom_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_OverRoom_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_OverRoom_Rsp* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_OverRoom_Rsp*>(
               &_Msg_Battle_OverRoom_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_Battle_OverRoom_Rsp& a, Msg_Battle_OverRoom_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_OverRoom_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_OverRoom_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_OverRoom_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_OverRoom_Rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_Battle_OverRoom_Rsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_Battle_OverRoom_Rsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_OverRoom_Rsp";
  }
  protected:
  explicit Msg_Battle_OverRoom_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_OverRoom_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class load_progress_info_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.load_progress_info_t) */ {
 public:
  inline load_progress_info_t() : load_progress_info_t(nullptr) {}
  ~load_progress_info_t() override;
  explicit PROTOBUF_CONSTEXPR load_progress_info_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  load_progress_info_t(const load_progress_info_t& from);
  load_progress_info_t(load_progress_info_t&& from) noexcept
    : load_progress_info_t() {
    *this = ::std::move(from);
  }

  inline load_progress_info_t& operator=(const load_progress_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline load_progress_info_t& operator=(load_progress_info_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const load_progress_info_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const load_progress_info_t* internal_default_instance() {
    return reinterpret_cast<const load_progress_info_t*>(
               &_load_progress_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(load_progress_info_t& a, load_progress_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(load_progress_info_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(load_progress_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  load_progress_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<load_progress_info_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const load_progress_info_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const load_progress_info_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(load_progress_info_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.load_progress_info_t";
  }
  protected:
  explicit load_progress_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlUseridFieldNumber = 1,
    kIProgressFieldNumber = 2,
  };
  // int64 llUserid = 1;
  void clear_lluserid();
  int64_t lluserid() const;
  void set_lluserid(int64_t value);
  private:
  int64_t _internal_lluserid() const;
  void _internal_set_lluserid(int64_t value);
  public:

  // int32 iProgress = 2;
  void clear_iprogress();
  int32_t iprogress() const;
  void set_iprogress(int32_t value);
  private:
  int32_t _internal_iprogress() const;
  void _internal_set_iprogress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.load_progress_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t lluserid_;
  int32_t iprogress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_RoomLoadProgress_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_RoomLoadProgress_Notify) */ {
 public:
  inline Msg_RoomLoadProgress_Notify() : Msg_RoomLoadProgress_Notify(nullptr) {}
  ~Msg_RoomLoadProgress_Notify() override;
  explicit PROTOBUF_CONSTEXPR Msg_RoomLoadProgress_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RoomLoadProgress_Notify(const Msg_RoomLoadProgress_Notify& from);
  Msg_RoomLoadProgress_Notify(Msg_RoomLoadProgress_Notify&& from) noexcept
    : Msg_RoomLoadProgress_Notify() {
    *this = ::std::move(from);
  }

  inline Msg_RoomLoadProgress_Notify& operator=(const Msg_RoomLoadProgress_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RoomLoadProgress_Notify& operator=(Msg_RoomLoadProgress_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RoomLoadProgress_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RoomLoadProgress_Notify* internal_default_instance() {
    return reinterpret_cast<const Msg_RoomLoadProgress_Notify*>(
               &_Msg_RoomLoadProgress_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Msg_RoomLoadProgress_Notify& a, Msg_RoomLoadProgress_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RoomLoadProgress_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RoomLoadProgress_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RoomLoadProgress_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RoomLoadProgress_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_RoomLoadProgress_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_RoomLoadProgress_Notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RoomLoadProgress_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_RoomLoadProgress_Notify";
  }
  protected:
  explicit Msg_RoomLoadProgress_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecLoadFieldNumber = 1,
  };
  // repeated .ProtoMsg.load_progress_info_t vecLoad = 1;
  int vecload_size() const;
  private:
  int _internal_vecload_size() const;
  public:
  void clear_vecload();
  ::ProtoMsg::load_progress_info_t* mutable_vecload(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::load_progress_info_t >*
      mutable_vecload();
  private:
  const ::ProtoMsg::load_progress_info_t& _internal_vecload(int index) const;
  ::ProtoMsg::load_progress_info_t* _internal_add_vecload();
  public:
  const ::ProtoMsg::load_progress_info_t& vecload(int index) const;
  ::ProtoMsg::load_progress_info_t* add_vecload();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::load_progress_info_t >&
      vecload() const;

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_RoomLoadProgress_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::load_progress_info_t > vecload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_RoomHeartbeat_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_RoomHeartbeat_Notify) */ {
 public:
  inline Msg_RoomHeartbeat_Notify() : Msg_RoomHeartbeat_Notify(nullptr) {}
  ~Msg_RoomHeartbeat_Notify() override;
  explicit PROTOBUF_CONSTEXPR Msg_RoomHeartbeat_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RoomHeartbeat_Notify(const Msg_RoomHeartbeat_Notify& from);
  Msg_RoomHeartbeat_Notify(Msg_RoomHeartbeat_Notify&& from) noexcept
    : Msg_RoomHeartbeat_Notify() {
    *this = ::std::move(from);
  }

  inline Msg_RoomHeartbeat_Notify& operator=(const Msg_RoomHeartbeat_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RoomHeartbeat_Notify& operator=(Msg_RoomHeartbeat_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RoomHeartbeat_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RoomHeartbeat_Notify* internal_default_instance() {
    return reinterpret_cast<const Msg_RoomHeartbeat_Notify*>(
               &_Msg_RoomHeartbeat_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Msg_RoomHeartbeat_Notify& a, Msg_RoomHeartbeat_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RoomHeartbeat_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RoomHeartbeat_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RoomHeartbeat_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RoomHeartbeat_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_RoomHeartbeat_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_RoomHeartbeat_Notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RoomHeartbeat_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_RoomHeartbeat_Notify";
  }
  protected:
  explicit Msg_RoomHeartbeat_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecOrdersFieldNumber = 3,
    kIServerTimeFieldNumber = 1,
    kIRoomTimeFieldNumber = 2,
  };
  // repeated .ProtoMsg.battle_order_t vecOrders = 3;
  int vecorders_size() const;
  private:
  int _internal_vecorders_size() const;
  public:
  void clear_vecorders();
  ::ProtoMsg::battle_order_t* mutable_vecorders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::battle_order_t >*
      mutable_vecorders();
  private:
  const ::ProtoMsg::battle_order_t& _internal_vecorders(int index) const;
  ::ProtoMsg::battle_order_t* _internal_add_vecorders();
  public:
  const ::ProtoMsg::battle_order_t& vecorders(int index) const;
  ::ProtoMsg::battle_order_t* add_vecorders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::battle_order_t >&
      vecorders() const;

  // int32 iServerTime = 1;
  void clear_iservertime();
  int32_t iservertime() const;
  void set_iservertime(int32_t value);
  private:
  int32_t _internal_iservertime() const;
  void _internal_set_iservertime(int32_t value);
  public:

  // int32 iRoomTime = 2;
  void clear_iroomtime();
  int32_t iroomtime() const;
  void set_iroomtime(int32_t value);
  private:
  int32_t _internal_iroomtime() const;
  void _internal_set_iroomtime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_RoomHeartbeat_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::battle_order_t > vecorders_;
  int32_t iservertime_;
  int32_t iroomtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_RoomStart_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_RoomStart_Notify) */ {
 public:
  inline Msg_RoomStart_Notify() : Msg_RoomStart_Notify(nullptr) {}
  ~Msg_RoomStart_Notify() override;
  explicit PROTOBUF_CONSTEXPR Msg_RoomStart_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RoomStart_Notify(const Msg_RoomStart_Notify& from);
  Msg_RoomStart_Notify(Msg_RoomStart_Notify&& from) noexcept
    : Msg_RoomStart_Notify() {
    *this = ::std::move(from);
  }

  inline Msg_RoomStart_Notify& operator=(const Msg_RoomStart_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RoomStart_Notify& operator=(Msg_RoomStart_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RoomStart_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RoomStart_Notify* internal_default_instance() {
    return reinterpret_cast<const Msg_RoomStart_Notify*>(
               &_Msg_RoomStart_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Msg_RoomStart_Notify& a, Msg_RoomStart_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RoomStart_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RoomStart_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RoomStart_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RoomStart_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_RoomStart_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_RoomStart_Notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RoomStart_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_RoomStart_Notify";
  }
  protected:
  explicit Msg_RoomStart_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIServerTimeFieldNumber = 1,
    kIRoomTimeFieldNumber = 2,
  };
  // int32 iServerTime = 1;
  void clear_iservertime();
  int32_t iservertime() const;
  void set_iservertime(int32_t value);
  private:
  int32_t _internal_iservertime() const;
  void _internal_set_iservertime(int32_t value);
  public:

  // int32 iRoomTime = 2;
  void clear_iroomtime();
  int32_t iroomtime() const;
  void set_iroomtime(int32_t value);
  private:
  int32_t _internal_iroomtime() const;
  void _internal_set_iroomtime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_RoomStart_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t iservertime_;
  int32_t iroomtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_Result_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_Battle_Result_Notify) */ {
 public:
  inline Msg_Battle_Result_Notify() : Msg_Battle_Result_Notify(nullptr) {}
  ~Msg_Battle_Result_Notify() override;
  explicit PROTOBUF_CONSTEXPR Msg_Battle_Result_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_Result_Notify(const Msg_Battle_Result_Notify& from);
  Msg_Battle_Result_Notify(Msg_Battle_Result_Notify&& from) noexcept
    : Msg_Battle_Result_Notify() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_Result_Notify& operator=(const Msg_Battle_Result_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_Result_Notify& operator=(Msg_Battle_Result_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_Result_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_Result_Notify* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_Result_Notify*>(
               &_Msg_Battle_Result_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Msg_Battle_Result_Notify& a, Msg_Battle_Result_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_Result_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_Result_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_Result_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_Result_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Battle_Result_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Battle_Result_Notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Battle_Result_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_Battle_Result_Notify";
  }
  protected:
  explicit Msg_Battle_Result_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecDataFieldNumber = 2,
    kEReusltCodeFieldNumber = 1,
  };
  // repeated .ProtoMsg.user_battle_result_t vecData = 2;
  int vecdata_size() const;
  private:
  int _internal_vecdata_size() const;
  public:
  void clear_vecdata();
  ::ProtoMsg::user_battle_result_t* mutable_vecdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::user_battle_result_t >*
      mutable_vecdata();
  private:
  const ::ProtoMsg::user_battle_result_t& _internal_vecdata(int index) const;
  ::ProtoMsg::user_battle_result_t* _internal_add_vecdata();
  public:
  const ::ProtoMsg::user_battle_result_t& vecdata(int index) const;
  ::ProtoMsg::user_battle_result_t* add_vecdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::user_battle_result_t >&
      vecdata() const;

  // .ProtoMsg.EBRCode eReusltCode = 1;
  void clear_ereusltcode();
  ::ProtoMsg::EBRCode ereusltcode() const;
  void set_ereusltcode(::ProtoMsg::EBRCode value);
  private:
  ::ProtoMsg::EBRCode _internal_ereusltcode() const;
  void _internal_set_ereusltcode(::ProtoMsg::EBRCode value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_Battle_Result_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::user_battle_result_t > vecdata_;
  int ereusltcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fbattle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgModule_Battle

// -------------------------------------------------------------------

// Msg_Battle_Beat_Req

// -------------------------------------------------------------------

// Msg_Battle_Beat_Rsp

// -------------------------------------------------------------------

// Msg_Battle_EnterRoom_Req

// string strRoomSessionId = 1;
inline void Msg_Battle_EnterRoom_Req::clear_strroomsessionid() {
  strroomsessionid_.ClearToEmpty();
}
inline const std::string& Msg_Battle_EnterRoom_Req::strroomsessionid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Req.strRoomSessionId)
  return _internal_strroomsessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Battle_EnterRoom_Req::set_strroomsessionid(ArgT0&& arg0, ArgT... args) {
 
 strroomsessionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Req.strRoomSessionId)
}
inline std::string* Msg_Battle_EnterRoom_Req::mutable_strroomsessionid() {
  std::string* _s = _internal_mutable_strroomsessionid();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_Battle_EnterRoom_Req.strRoomSessionId)
  return _s;
}
inline const std::string& Msg_Battle_EnterRoom_Req::_internal_strroomsessionid() const {
  return strroomsessionid_.Get();
}
inline void Msg_Battle_EnterRoom_Req::_internal_set_strroomsessionid(const std::string& value) {
  
  strroomsessionid_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_Battle_EnterRoom_Req::_internal_mutable_strroomsessionid() {
  
  return strroomsessionid_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_Battle_EnterRoom_Req::release_strroomsessionid() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Msg_Battle_EnterRoom_Req.strRoomSessionId)
  return strroomsessionid_.Release();
}
inline void Msg_Battle_EnterRoom_Req::set_allocated_strroomsessionid(std::string* strroomsessionid) {
  if (strroomsessionid != nullptr) {
    
  } else {
    
  }
  strroomsessionid_.SetAllocated(strroomsessionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strroomsessionid_.IsDefault()) {
    strroomsessionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Msg_Battle_EnterRoom_Req.strRoomSessionId)
}

// string strUserSessionId = 2;
inline void Msg_Battle_EnterRoom_Req::clear_strusersessionid() {
  strusersessionid_.ClearToEmpty();
}
inline const std::string& Msg_Battle_EnterRoom_Req::strusersessionid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Req.strUserSessionId)
  return _internal_strusersessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Battle_EnterRoom_Req::set_strusersessionid(ArgT0&& arg0, ArgT... args) {
 
 strusersessionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Req.strUserSessionId)
}
inline std::string* Msg_Battle_EnterRoom_Req::mutable_strusersessionid() {
  std::string* _s = _internal_mutable_strusersessionid();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_Battle_EnterRoom_Req.strUserSessionId)
  return _s;
}
inline const std::string& Msg_Battle_EnterRoom_Req::_internal_strusersessionid() const {
  return strusersessionid_.Get();
}
inline void Msg_Battle_EnterRoom_Req::_internal_set_strusersessionid(const std::string& value) {
  
  strusersessionid_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_Battle_EnterRoom_Req::_internal_mutable_strusersessionid() {
  
  return strusersessionid_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_Battle_EnterRoom_Req::release_strusersessionid() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Msg_Battle_EnterRoom_Req.strUserSessionId)
  return strusersessionid_.Release();
}
inline void Msg_Battle_EnterRoom_Req::set_allocated_strusersessionid(std::string* strusersessionid) {
  if (strusersessionid != nullptr) {
    
  } else {
    
  }
  strusersessionid_.SetAllocated(strusersessionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strusersessionid_.IsDefault()) {
    strusersessionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Msg_Battle_EnterRoom_Req.strUserSessionId)
}

// -------------------------------------------------------------------

// Msg_Battle_EnterRoom_Rsp

// .ProtoMsg.ERoomType eType = 1;
inline void Msg_Battle_EnterRoom_Rsp::clear_etype() {
  etype_ = 0;
}
inline ::ProtoMsg::ERoomType Msg_Battle_EnterRoom_Rsp::_internal_etype() const {
  return static_cast< ::ProtoMsg::ERoomType >(etype_);
}
inline ::ProtoMsg::ERoomType Msg_Battle_EnterRoom_Rsp::etype() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Rsp.eType)
  return _internal_etype();
}
inline void Msg_Battle_EnterRoom_Rsp::_internal_set_etype(::ProtoMsg::ERoomType value) {
  
  etype_ = value;
}
inline void Msg_Battle_EnterRoom_Rsp::set_etype(::ProtoMsg::ERoomType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Rsp.eType)
}

// string strMapName = 2;
inline void Msg_Battle_EnterRoom_Rsp::clear_strmapname() {
  strmapname_.ClearToEmpty();
}
inline const std::string& Msg_Battle_EnterRoom_Rsp::strmapname() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Rsp.strMapName)
  return _internal_strmapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Battle_EnterRoom_Rsp::set_strmapname(ArgT0&& arg0, ArgT... args) {
 
 strmapname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Rsp.strMapName)
}
inline std::string* Msg_Battle_EnterRoom_Rsp::mutable_strmapname() {
  std::string* _s = _internal_mutable_strmapname();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_Battle_EnterRoom_Rsp.strMapName)
  return _s;
}
inline const std::string& Msg_Battle_EnterRoom_Rsp::_internal_strmapname() const {
  return strmapname_.Get();
}
inline void Msg_Battle_EnterRoom_Rsp::_internal_set_strmapname(const std::string& value) {
  
  strmapname_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_Battle_EnterRoom_Rsp::_internal_mutable_strmapname() {
  
  return strmapname_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_Battle_EnterRoom_Rsp::release_strmapname() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Msg_Battle_EnterRoom_Rsp.strMapName)
  return strmapname_.Release();
}
inline void Msg_Battle_EnterRoom_Rsp::set_allocated_strmapname(std::string* strmapname) {
  if (strmapname != nullptr) {
    
  } else {
    
  }
  strmapname_.SetAllocated(strmapname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strmapname_.IsDefault()) {
    strmapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Msg_Battle_EnterRoom_Rsp.strMapName)
}

// int32 iRandSeed = 3;
inline void Msg_Battle_EnterRoom_Rsp::clear_irandseed() {
  irandseed_ = 0;
}
inline int32_t Msg_Battle_EnterRoom_Rsp::_internal_irandseed() const {
  return irandseed_;
}
inline int32_t Msg_Battle_EnterRoom_Rsp::irandseed() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Rsp.iRandSeed)
  return _internal_irandseed();
}
inline void Msg_Battle_EnterRoom_Rsp::_internal_set_irandseed(int32_t value) {
  
  irandseed_ = value;
}
inline void Msg_Battle_EnterRoom_Rsp::set_irandseed(int32_t value) {
  _internal_set_irandseed(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Rsp.iRandSeed)
}

// .ProtoMsg.ERoomStatus eStatus = 4;
inline void Msg_Battle_EnterRoom_Rsp::clear_estatus() {
  estatus_ = 0;
}
inline ::ProtoMsg::ERoomStatus Msg_Battle_EnterRoom_Rsp::_internal_estatus() const {
  return static_cast< ::ProtoMsg::ERoomStatus >(estatus_);
}
inline ::ProtoMsg::ERoomStatus Msg_Battle_EnterRoom_Rsp::estatus() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Rsp.eStatus)
  return _internal_estatus();
}
inline void Msg_Battle_EnterRoom_Rsp::_internal_set_estatus(::ProtoMsg::ERoomStatus value) {
  
  estatus_ = value;
}
inline void Msg_Battle_EnterRoom_Rsp::set_estatus(::ProtoMsg::ERoomStatus value) {
  _internal_set_estatus(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Rsp.eStatus)
}

// int32 iRoomTime = 5;
inline void Msg_Battle_EnterRoom_Rsp::clear_iroomtime() {
  iroomtime_ = 0;
}
inline int32_t Msg_Battle_EnterRoom_Rsp::_internal_iroomtime() const {
  return iroomtime_;
}
inline int32_t Msg_Battle_EnterRoom_Rsp::iroomtime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Rsp.iRoomTime)
  return _internal_iroomtime();
}
inline void Msg_Battle_EnterRoom_Rsp::_internal_set_iroomtime(int32_t value) {
  
  iroomtime_ = value;
}
inline void Msg_Battle_EnterRoom_Rsp::set_iroomtime(int32_t value) {
  _internal_set_iroomtime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Rsp.iRoomTime)
}

// int32 iStartTime = 6;
inline void Msg_Battle_EnterRoom_Rsp::clear_istarttime() {
  istarttime_ = 0;
}
inline int32_t Msg_Battle_EnterRoom_Rsp::_internal_istarttime() const {
  return istarttime_;
}
inline int32_t Msg_Battle_EnterRoom_Rsp::istarttime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_EnterRoom_Rsp.iStartTime)
  return _internal_istarttime();
}
inline void Msg_Battle_EnterRoom_Rsp::_internal_set_istarttime(int32_t value) {
  
  istarttime_ = value;
}
inline void Msg_Battle_EnterRoom_Rsp::set_istarttime(int32_t value) {
  _internal_set_istarttime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_EnterRoom_Rsp.iStartTime)
}

// -------------------------------------------------------------------

// Msg_Battle_Error_Notify

// uint32 uiModuleId = 1;
inline void Msg_Battle_Error_Notify::clear_uimoduleid() {
  uimoduleid_ = 0u;
}
inline uint32_t Msg_Battle_Error_Notify::_internal_uimoduleid() const {
  return uimoduleid_;
}
inline uint32_t Msg_Battle_Error_Notify::uimoduleid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_Error_Notify.uiModuleId)
  return _internal_uimoduleid();
}
inline void Msg_Battle_Error_Notify::_internal_set_uimoduleid(uint32_t value) {
  
  uimoduleid_ = value;
}
inline void Msg_Battle_Error_Notify::set_uimoduleid(uint32_t value) {
  _internal_set_uimoduleid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_Error_Notify.uiModuleId)
}

// uint32 uiCmd = 2;
inline void Msg_Battle_Error_Notify::clear_uicmd() {
  uicmd_ = 0u;
}
inline uint32_t Msg_Battle_Error_Notify::_internal_uicmd() const {
  return uicmd_;
}
inline uint32_t Msg_Battle_Error_Notify::uicmd() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_Error_Notify.uiCmd)
  return _internal_uicmd();
}
inline void Msg_Battle_Error_Notify::_internal_set_uicmd(uint32_t value) {
  
  uicmd_ = value;
}
inline void Msg_Battle_Error_Notify::set_uicmd(uint32_t value) {
  _internal_set_uicmd(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_Error_Notify.uiCmd)
}

// .ProtoMsg.ResultCode eErrorCode = 3;
inline void Msg_Battle_Error_Notify::clear_eerrorcode() {
  eerrorcode_ = 0;
}
inline ::ProtoMsg::ResultCode Msg_Battle_Error_Notify::_internal_eerrorcode() const {
  return static_cast< ::ProtoMsg::ResultCode >(eerrorcode_);
}
inline ::ProtoMsg::ResultCode Msg_Battle_Error_Notify::eerrorcode() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_Error_Notify.eErrorCode)
  return _internal_eerrorcode();
}
inline void Msg_Battle_Error_Notify::_internal_set_eerrorcode(::ProtoMsg::ResultCode value) {
  
  eerrorcode_ = value;
}
inline void Msg_Battle_Error_Notify::set_eerrorcode(::ProtoMsg::ResultCode value) {
  _internal_set_eerrorcode(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_Error_Notify.eErrorCode)
}

// -------------------------------------------------------------------

// battle_room_info_t

// string strSession = 1;
inline void battle_room_info_t::clear_strsession() {
  strsession_.ClearToEmpty();
}
inline const std::string& battle_room_info_t::strsession() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_room_info_t.strSession)
  return _internal_strsession();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void battle_room_info_t::set_strsession(ArgT0&& arg0, ArgT... args) {
 
 strsession_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_room_info_t.strSession)
}
inline std::string* battle_room_info_t::mutable_strsession() {
  std::string* _s = _internal_mutable_strsession();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.battle_room_info_t.strSession)
  return _s;
}
inline const std::string& battle_room_info_t::_internal_strsession() const {
  return strsession_.Get();
}
inline void battle_room_info_t::_internal_set_strsession(const std::string& value) {
  
  strsession_.Set(value, GetArenaForAllocation());
}
inline std::string* battle_room_info_t::_internal_mutable_strsession() {
  
  return strsession_.Mutable(GetArenaForAllocation());
}
inline std::string* battle_room_info_t::release_strsession() {
  // @@protoc_insertion_point(field_release:ProtoMsg.battle_room_info_t.strSession)
  return strsession_.Release();
}
inline void battle_room_info_t::set_allocated_strsession(std::string* strsession) {
  if (strsession != nullptr) {
    
  } else {
    
  }
  strsession_.SetAllocated(strsession, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strsession_.IsDefault()) {
    strsession_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.battle_room_info_t.strSession)
}

// .ProtoMsg.ERoomType eRoomType = 2;
inline void battle_room_info_t::clear_eroomtype() {
  eroomtype_ = 0;
}
inline ::ProtoMsg::ERoomType battle_room_info_t::_internal_eroomtype() const {
  return static_cast< ::ProtoMsg::ERoomType >(eroomtype_);
}
inline ::ProtoMsg::ERoomType battle_room_info_t::eroomtype() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_room_info_t.eRoomType)
  return _internal_eroomtype();
}
inline void battle_room_info_t::_internal_set_eroomtype(::ProtoMsg::ERoomType value) {
  
  eroomtype_ = value;
}
inline void battle_room_info_t::set_eroomtype(::ProtoMsg::ERoomType value) {
  _internal_set_eroomtype(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_room_info_t.eRoomType)
}

// string mapName = 3;
inline void battle_room_info_t::clear_mapname() {
  mapname_.ClearToEmpty();
}
inline const std::string& battle_room_info_t::mapname() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_room_info_t.mapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void battle_room_info_t::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 mapname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_room_info_t.mapName)
}
inline std::string* battle_room_info_t::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.battle_room_info_t.mapName)
  return _s;
}
inline const std::string& battle_room_info_t::_internal_mapname() const {
  return mapname_.Get();
}
inline void battle_room_info_t::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(value, GetArenaForAllocation());
}
inline std::string* battle_room_info_t::_internal_mutable_mapname() {
  
  return mapname_.Mutable(GetArenaForAllocation());
}
inline std::string* battle_room_info_t::release_mapname() {
  // @@protoc_insertion_point(field_release:ProtoMsg.battle_room_info_t.mapName)
  return mapname_.Release();
}
inline void battle_room_info_t::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(mapname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapname_.IsDefault()) {
    mapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.battle_room_info_t.mapName)
}

// -------------------------------------------------------------------

// battle_order_t

// int32 iExecTime = 1;
inline void battle_order_t::clear_iexectime() {
  iexectime_ = 0;
}
inline int32_t battle_order_t::_internal_iexectime() const {
  return iexectime_;
}
inline int32_t battle_order_t::iexectime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_order_t.iExecTime)
  return _internal_iexectime();
}
inline void battle_order_t::_internal_set_iexectime(int32_t value) {
  
  iexectime_ = value;
}
inline void battle_order_t::set_iexectime(int32_t value) {
  _internal_set_iexectime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_order_t.iExecTime)
}

// int32 iUserId = 2;
inline void battle_order_t::clear_iuserid() {
  iuserid_ = 0;
}
inline int32_t battle_order_t::_internal_iuserid() const {
  return iuserid_;
}
inline int32_t battle_order_t::iuserid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_order_t.iUserId)
  return _internal_iuserid();
}
inline void battle_order_t::_internal_set_iuserid(int32_t value) {
  
  iuserid_ = value;
}
inline void battle_order_t::set_iuserid(int32_t value) {
  _internal_set_iuserid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_order_t.iUserId)
}

// int32 iType = 3;
inline void battle_order_t::clear_itype() {
  itype_ = 0;
}
inline int32_t battle_order_t::_internal_itype() const {
  return itype_;
}
inline int32_t battle_order_t::itype() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_order_t.iType)
  return _internal_itype();
}
inline void battle_order_t::_internal_set_itype(int32_t value) {
  
  itype_ = value;
}
inline void battle_order_t::set_itype(int32_t value) {
  _internal_set_itype(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_order_t.iType)
}

// int32 iArg1 = 4;
inline void battle_order_t::clear_iarg1() {
  iarg1_ = 0;
}
inline int32_t battle_order_t::_internal_iarg1() const {
  return iarg1_;
}
inline int32_t battle_order_t::iarg1() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_order_t.iArg1)
  return _internal_iarg1();
}
inline void battle_order_t::_internal_set_iarg1(int32_t value) {
  
  iarg1_ = value;
}
inline void battle_order_t::set_iarg1(int32_t value) {
  _internal_set_iarg1(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_order_t.iArg1)
}

// int32 iArg2 = 5;
inline void battle_order_t::clear_iarg2() {
  iarg2_ = 0;
}
inline int32_t battle_order_t::_internal_iarg2() const {
  return iarg2_;
}
inline int32_t battle_order_t::iarg2() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.battle_order_t.iArg2)
  return _internal_iarg2();
}
inline void battle_order_t::_internal_set_iarg2(int32_t value) {
  
  iarg2_ = value;
}
inline void battle_order_t::set_iarg2(int32_t value) {
  _internal_set_iarg2(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.battle_order_t.iArg2)
}

// -------------------------------------------------------------------

// Msg_Battle_OverRoom_Req

// bytes oUserData = 1;
inline void Msg_Battle_OverRoom_Req::clear_ouserdata() {
  ouserdata_.ClearToEmpty();
}
inline const std::string& Msg_Battle_OverRoom_Req::ouserdata() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_OverRoom_Req.oUserData)
  return _internal_ouserdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Battle_OverRoom_Req::set_ouserdata(ArgT0&& arg0, ArgT... args) {
 
 ouserdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_OverRoom_Req.oUserData)
}
inline std::string* Msg_Battle_OverRoom_Req::mutable_ouserdata() {
  std::string* _s = _internal_mutable_ouserdata();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_Battle_OverRoom_Req.oUserData)
  return _s;
}
inline const std::string& Msg_Battle_OverRoom_Req::_internal_ouserdata() const {
  return ouserdata_.Get();
}
inline void Msg_Battle_OverRoom_Req::_internal_set_ouserdata(const std::string& value) {
  
  ouserdata_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_Battle_OverRoom_Req::_internal_mutable_ouserdata() {
  
  return ouserdata_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_Battle_OverRoom_Req::release_ouserdata() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Msg_Battle_OverRoom_Req.oUserData)
  return ouserdata_.Release();
}
inline void Msg_Battle_OverRoom_Req::set_allocated_ouserdata(std::string* ouserdata) {
  if (ouserdata != nullptr) {
    
  } else {
    
  }
  ouserdata_.SetAllocated(ouserdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ouserdata_.IsDefault()) {
    ouserdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Msg_Battle_OverRoom_Req.oUserData)
}

// int32 iKeyType = 2;
inline void Msg_Battle_OverRoom_Req::clear_ikeytype() {
  ikeytype_ = 0;
}
inline int32_t Msg_Battle_OverRoom_Req::_internal_ikeytype() const {
  return ikeytype_;
}
inline int32_t Msg_Battle_OverRoom_Req::ikeytype() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_OverRoom_Req.iKeyType)
  return _internal_ikeytype();
}
inline void Msg_Battle_OverRoom_Req::_internal_set_ikeytype(int32_t value) {
  
  ikeytype_ = value;
}
inline void Msg_Battle_OverRoom_Req::set_ikeytype(int32_t value) {
  _internal_set_ikeytype(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_OverRoom_Req.iKeyType)
}

// int32 iCrc = 3;
inline void Msg_Battle_OverRoom_Req::clear_icrc() {
  icrc_ = 0;
}
inline int32_t Msg_Battle_OverRoom_Req::_internal_icrc() const {
  return icrc_;
}
inline int32_t Msg_Battle_OverRoom_Req::icrc() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_OverRoom_Req.iCrc)
  return _internal_icrc();
}
inline void Msg_Battle_OverRoom_Req::_internal_set_icrc(int32_t value) {
  
  icrc_ = value;
}
inline void Msg_Battle_OverRoom_Req::set_icrc(int32_t value) {
  _internal_set_icrc(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_OverRoom_Req.iCrc)
}

// -------------------------------------------------------------------

// Msg_Battle_OverRoom_Rsp

// -------------------------------------------------------------------

// load_progress_info_t

// int64 llUserid = 1;
inline void load_progress_info_t::clear_lluserid() {
  lluserid_ = int64_t{0};
}
inline int64_t load_progress_info_t::_internal_lluserid() const {
  return lluserid_;
}
inline int64_t load_progress_info_t::lluserid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.load_progress_info_t.llUserid)
  return _internal_lluserid();
}
inline void load_progress_info_t::_internal_set_lluserid(int64_t value) {
  
  lluserid_ = value;
}
inline void load_progress_info_t::set_lluserid(int64_t value) {
  _internal_set_lluserid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.load_progress_info_t.llUserid)
}

// int32 iProgress = 2;
inline void load_progress_info_t::clear_iprogress() {
  iprogress_ = 0;
}
inline int32_t load_progress_info_t::_internal_iprogress() const {
  return iprogress_;
}
inline int32_t load_progress_info_t::iprogress() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.load_progress_info_t.iProgress)
  return _internal_iprogress();
}
inline void load_progress_info_t::_internal_set_iprogress(int32_t value) {
  
  iprogress_ = value;
}
inline void load_progress_info_t::set_iprogress(int32_t value) {
  _internal_set_iprogress(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.load_progress_info_t.iProgress)
}

// -------------------------------------------------------------------

// Msg_RoomLoadProgress_Notify

// repeated .ProtoMsg.load_progress_info_t vecLoad = 1;
inline int Msg_RoomLoadProgress_Notify::_internal_vecload_size() const {
  return vecload_.size();
}
inline int Msg_RoomLoadProgress_Notify::vecload_size() const {
  return _internal_vecload_size();
}
inline void Msg_RoomLoadProgress_Notify::clear_vecload() {
  vecload_.Clear();
}
inline ::ProtoMsg::load_progress_info_t* Msg_RoomLoadProgress_Notify::mutable_vecload(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_RoomLoadProgress_Notify.vecLoad)
  return vecload_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::load_progress_info_t >*
Msg_RoomLoadProgress_Notify::mutable_vecload() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMsg.Msg_RoomLoadProgress_Notify.vecLoad)
  return &vecload_;
}
inline const ::ProtoMsg::load_progress_info_t& Msg_RoomLoadProgress_Notify::_internal_vecload(int index) const {
  return vecload_.Get(index);
}
inline const ::ProtoMsg::load_progress_info_t& Msg_RoomLoadProgress_Notify::vecload(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_RoomLoadProgress_Notify.vecLoad)
  return _internal_vecload(index);
}
inline ::ProtoMsg::load_progress_info_t* Msg_RoomLoadProgress_Notify::_internal_add_vecload() {
  return vecload_.Add();
}
inline ::ProtoMsg::load_progress_info_t* Msg_RoomLoadProgress_Notify::add_vecload() {
  ::ProtoMsg::load_progress_info_t* _add = _internal_add_vecload();
  // @@protoc_insertion_point(field_add:ProtoMsg.Msg_RoomLoadProgress_Notify.vecLoad)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::load_progress_info_t >&
Msg_RoomLoadProgress_Notify::vecload() const {
  // @@protoc_insertion_point(field_list:ProtoMsg.Msg_RoomLoadProgress_Notify.vecLoad)
  return vecload_;
}

// -------------------------------------------------------------------

// Msg_RoomHeartbeat_Notify

// int32 iServerTime = 1;
inline void Msg_RoomHeartbeat_Notify::clear_iservertime() {
  iservertime_ = 0;
}
inline int32_t Msg_RoomHeartbeat_Notify::_internal_iservertime() const {
  return iservertime_;
}
inline int32_t Msg_RoomHeartbeat_Notify::iservertime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_RoomHeartbeat_Notify.iServerTime)
  return _internal_iservertime();
}
inline void Msg_RoomHeartbeat_Notify::_internal_set_iservertime(int32_t value) {
  
  iservertime_ = value;
}
inline void Msg_RoomHeartbeat_Notify::set_iservertime(int32_t value) {
  _internal_set_iservertime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_RoomHeartbeat_Notify.iServerTime)
}

// int32 iRoomTime = 2;
inline void Msg_RoomHeartbeat_Notify::clear_iroomtime() {
  iroomtime_ = 0;
}
inline int32_t Msg_RoomHeartbeat_Notify::_internal_iroomtime() const {
  return iroomtime_;
}
inline int32_t Msg_RoomHeartbeat_Notify::iroomtime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_RoomHeartbeat_Notify.iRoomTime)
  return _internal_iroomtime();
}
inline void Msg_RoomHeartbeat_Notify::_internal_set_iroomtime(int32_t value) {
  
  iroomtime_ = value;
}
inline void Msg_RoomHeartbeat_Notify::set_iroomtime(int32_t value) {
  _internal_set_iroomtime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_RoomHeartbeat_Notify.iRoomTime)
}

// repeated .ProtoMsg.battle_order_t vecOrders = 3;
inline int Msg_RoomHeartbeat_Notify::_internal_vecorders_size() const {
  return vecorders_.size();
}
inline int Msg_RoomHeartbeat_Notify::vecorders_size() const {
  return _internal_vecorders_size();
}
inline void Msg_RoomHeartbeat_Notify::clear_vecorders() {
  vecorders_.Clear();
}
inline ::ProtoMsg::battle_order_t* Msg_RoomHeartbeat_Notify::mutable_vecorders(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_RoomHeartbeat_Notify.vecOrders)
  return vecorders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::battle_order_t >*
Msg_RoomHeartbeat_Notify::mutable_vecorders() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMsg.Msg_RoomHeartbeat_Notify.vecOrders)
  return &vecorders_;
}
inline const ::ProtoMsg::battle_order_t& Msg_RoomHeartbeat_Notify::_internal_vecorders(int index) const {
  return vecorders_.Get(index);
}
inline const ::ProtoMsg::battle_order_t& Msg_RoomHeartbeat_Notify::vecorders(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_RoomHeartbeat_Notify.vecOrders)
  return _internal_vecorders(index);
}
inline ::ProtoMsg::battle_order_t* Msg_RoomHeartbeat_Notify::_internal_add_vecorders() {
  return vecorders_.Add();
}
inline ::ProtoMsg::battle_order_t* Msg_RoomHeartbeat_Notify::add_vecorders() {
  ::ProtoMsg::battle_order_t* _add = _internal_add_vecorders();
  // @@protoc_insertion_point(field_add:ProtoMsg.Msg_RoomHeartbeat_Notify.vecOrders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::battle_order_t >&
Msg_RoomHeartbeat_Notify::vecorders() const {
  // @@protoc_insertion_point(field_list:ProtoMsg.Msg_RoomHeartbeat_Notify.vecOrders)
  return vecorders_;
}

// -------------------------------------------------------------------

// Msg_RoomStart_Notify

// int32 iServerTime = 1;
inline void Msg_RoomStart_Notify::clear_iservertime() {
  iservertime_ = 0;
}
inline int32_t Msg_RoomStart_Notify::_internal_iservertime() const {
  return iservertime_;
}
inline int32_t Msg_RoomStart_Notify::iservertime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_RoomStart_Notify.iServerTime)
  return _internal_iservertime();
}
inline void Msg_RoomStart_Notify::_internal_set_iservertime(int32_t value) {
  
  iservertime_ = value;
}
inline void Msg_RoomStart_Notify::set_iservertime(int32_t value) {
  _internal_set_iservertime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_RoomStart_Notify.iServerTime)
}

// int32 iRoomTime = 2;
inline void Msg_RoomStart_Notify::clear_iroomtime() {
  iroomtime_ = 0;
}
inline int32_t Msg_RoomStart_Notify::_internal_iroomtime() const {
  return iroomtime_;
}
inline int32_t Msg_RoomStart_Notify::iroomtime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_RoomStart_Notify.iRoomTime)
  return _internal_iroomtime();
}
inline void Msg_RoomStart_Notify::_internal_set_iroomtime(int32_t value) {
  
  iroomtime_ = value;
}
inline void Msg_RoomStart_Notify::set_iroomtime(int32_t value) {
  _internal_set_iroomtime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_RoomStart_Notify.iRoomTime)
}

// -------------------------------------------------------------------

// Msg_Battle_Result_Notify

// .ProtoMsg.EBRCode eReusltCode = 1;
inline void Msg_Battle_Result_Notify::clear_ereusltcode() {
  ereusltcode_ = 0;
}
inline ::ProtoMsg::EBRCode Msg_Battle_Result_Notify::_internal_ereusltcode() const {
  return static_cast< ::ProtoMsg::EBRCode >(ereusltcode_);
}
inline ::ProtoMsg::EBRCode Msg_Battle_Result_Notify::ereusltcode() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_Result_Notify.eReusltCode)
  return _internal_ereusltcode();
}
inline void Msg_Battle_Result_Notify::_internal_set_ereusltcode(::ProtoMsg::EBRCode value) {
  
  ereusltcode_ = value;
}
inline void Msg_Battle_Result_Notify::set_ereusltcode(::ProtoMsg::EBRCode value) {
  _internal_set_ereusltcode(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_Battle_Result_Notify.eReusltCode)
}

// repeated .ProtoMsg.user_battle_result_t vecData = 2;
inline int Msg_Battle_Result_Notify::_internal_vecdata_size() const {
  return vecdata_.size();
}
inline int Msg_Battle_Result_Notify::vecdata_size() const {
  return _internal_vecdata_size();
}
inline ::ProtoMsg::user_battle_result_t* Msg_Battle_Result_Notify::mutable_vecdata(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_Battle_Result_Notify.vecData)
  return vecdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::user_battle_result_t >*
Msg_Battle_Result_Notify::mutable_vecdata() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMsg.Msg_Battle_Result_Notify.vecData)
  return &vecdata_;
}
inline const ::ProtoMsg::user_battle_result_t& Msg_Battle_Result_Notify::_internal_vecdata(int index) const {
  return vecdata_.Get(index);
}
inline const ::ProtoMsg::user_battle_result_t& Msg_Battle_Result_Notify::vecdata(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_Battle_Result_Notify.vecData)
  return _internal_vecdata(index);
}
inline ::ProtoMsg::user_battle_result_t* Msg_Battle_Result_Notify::_internal_add_vecdata() {
  return vecdata_.Add();
}
inline ::ProtoMsg::user_battle_result_t* Msg_Battle_Result_Notify::add_vecdata() {
  ::ProtoMsg::user_battle_result_t* _add = _internal_add_vecdata();
  // @@protoc_insertion_point(field_add:ProtoMsg.Msg_Battle_Result_Notify.vecData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::user_battle_result_t >&
Msg_Battle_Result_Notify::vecdata() const {
  // @@protoc_insertion_point(field_list:ProtoMsg.Msg_Battle_Result_Notify.vecData)
  return vecdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoMsg::MsgModule_Battle_MsgCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::MsgModule_Battle_MsgCmd>() {
  return ::ProtoMsg::MsgModule_Battle_MsgCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fbattle_2eproto
