// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fcommon_2eproto;
namespace ProtoMsg {
class Svr_Player_Info;
struct Svr_Player_InfoDefaultTypeInternal;
extern Svr_Player_InfoDefaultTypeInternal _Svr_Player_Info_default_instance_;
}  // namespace ProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMsg::Svr_Player_Info* Arena::CreateMaybeMessage<::ProtoMsg::Svr_Player_Info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMsg {

// ===================================================================

class Svr_Player_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Svr_Player_Info) */ {
 public:
  inline Svr_Player_Info() : Svr_Player_Info(nullptr) {}
  ~Svr_Player_Info() override;
  explicit PROTOBUF_CONSTEXPR Svr_Player_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Svr_Player_Info(const Svr_Player_Info& from);
  Svr_Player_Info(Svr_Player_Info&& from) noexcept
    : Svr_Player_Info() {
    *this = ::std::move(from);
  }

  inline Svr_Player_Info& operator=(const Svr_Player_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Svr_Player_Info& operator=(Svr_Player_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Svr_Player_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Svr_Player_Info* internal_default_instance() {
    return reinterpret_cast<const Svr_Player_Info*>(
               &_Svr_Player_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Svr_Player_Info& a, Svr_Player_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Svr_Player_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Svr_Player_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Svr_Player_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Svr_Player_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Svr_Player_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Svr_Player_Info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Svr_Player_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Svr_Player_Info";
  }
  protected:
  explicit Svr_Player_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrPlayerNameFieldNumber = 2,
    kStrDevIdFieldNumber = 9,
    kStrChannelFieldNumber = 10,
    kStrClientIpFieldNumber = 11,
    kStrCityCodeFieldNumber = 12,
    kStrAccNameFieldNumber = 13,
    kStrAppVersionFieldNumber = 14,
    kLlPlayerIdFieldNumber = 1,
    kUiLevelFieldNumber = 3,
    kUiGenderFieldNumber = 4,
    kLlLogoutTimeFieldNumber = 6,
    kEPlayerStatusFieldNumber = 5,
    kUiGameIdFieldNumber = 7,
    kLlLoginTimeFieldNumber = 15,
    kUiGateIdFieldNumber = 8,
  };
  // string strPlayerName = 2;
  void clear_strplayername();
  const std::string& strplayername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strplayername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strplayername();
  PROTOBUF_NODISCARD std::string* release_strplayername();
  void set_allocated_strplayername(std::string* strplayername);
  private:
  const std::string& _internal_strplayername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strplayername(const std::string& value);
  std::string* _internal_mutable_strplayername();
  public:

  // string strDevId = 9;
  void clear_strdevid();
  const std::string& strdevid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strdevid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strdevid();
  PROTOBUF_NODISCARD std::string* release_strdevid();
  void set_allocated_strdevid(std::string* strdevid);
  private:
  const std::string& _internal_strdevid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strdevid(const std::string& value);
  std::string* _internal_mutable_strdevid();
  public:

  // string strChannel = 10;
  void clear_strchannel();
  const std::string& strchannel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strchannel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strchannel();
  PROTOBUF_NODISCARD std::string* release_strchannel();
  void set_allocated_strchannel(std::string* strchannel);
  private:
  const std::string& _internal_strchannel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strchannel(const std::string& value);
  std::string* _internal_mutable_strchannel();
  public:

  // string strClientIp = 11;
  void clear_strclientip();
  const std::string& strclientip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strclientip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strclientip();
  PROTOBUF_NODISCARD std::string* release_strclientip();
  void set_allocated_strclientip(std::string* strclientip);
  private:
  const std::string& _internal_strclientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strclientip(const std::string& value);
  std::string* _internal_mutable_strclientip();
  public:

  // string strCityCode = 12;
  void clear_strcitycode();
  const std::string& strcitycode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strcitycode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strcitycode();
  PROTOBUF_NODISCARD std::string* release_strcitycode();
  void set_allocated_strcitycode(std::string* strcitycode);
  private:
  const std::string& _internal_strcitycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcitycode(const std::string& value);
  std::string* _internal_mutable_strcitycode();
  public:

  // string strAccName = 13;
  void clear_straccname();
  const std::string& straccname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_straccname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_straccname();
  PROTOBUF_NODISCARD std::string* release_straccname();
  void set_allocated_straccname(std::string* straccname);
  private:
  const std::string& _internal_straccname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_straccname(const std::string& value);
  std::string* _internal_mutable_straccname();
  public:

  // string strAppVersion = 14;
  void clear_strappversion();
  const std::string& strappversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strappversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strappversion();
  PROTOBUF_NODISCARD std::string* release_strappversion();
  void set_allocated_strappversion(std::string* strappversion);
  private:
  const std::string& _internal_strappversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strappversion(const std::string& value);
  std::string* _internal_mutable_strappversion();
  public:

  // int64 llPlayerId = 1;
  void clear_llplayerid();
  int64_t llplayerid() const;
  void set_llplayerid(int64_t value);
  private:
  int64_t _internal_llplayerid() const;
  void _internal_set_llplayerid(int64_t value);
  public:

  // uint32 uiLevel = 3;
  void clear_uilevel();
  uint32_t uilevel() const;
  void set_uilevel(uint32_t value);
  private:
  uint32_t _internal_uilevel() const;
  void _internal_set_uilevel(uint32_t value);
  public:

  // uint32 uiGender = 4;
  void clear_uigender();
  uint32_t uigender() const;
  void set_uigender(uint32_t value);
  private:
  uint32_t _internal_uigender() const;
  void _internal_set_uigender(uint32_t value);
  public:

  // int64 llLogoutTime = 6;
  void clear_lllogouttime();
  int64_t lllogouttime() const;
  void set_lllogouttime(int64_t value);
  private:
  int64_t _internal_lllogouttime() const;
  void _internal_set_lllogouttime(int64_t value);
  public:

  // .ProtoMsg.EPlayerStatus ePlayerStatus = 5;
  void clear_eplayerstatus();
  ::ProtoMsg::EPlayerStatus eplayerstatus() const;
  void set_eplayerstatus(::ProtoMsg::EPlayerStatus value);
  private:
  ::ProtoMsg::EPlayerStatus _internal_eplayerstatus() const;
  void _internal_set_eplayerstatus(::ProtoMsg::EPlayerStatus value);
  public:

  // uint32 uiGameId = 7;
  void clear_uigameid();
  uint32_t uigameid() const;
  void set_uigameid(uint32_t value);
  private:
  uint32_t _internal_uigameid() const;
  void _internal_set_uigameid(uint32_t value);
  public:

  // int64 llLoginTime = 15;
  void clear_lllogintime();
  int64_t lllogintime() const;
  void set_lllogintime(int64_t value);
  private:
  int64_t _internal_lllogintime() const;
  void _internal_set_lllogintime(int64_t value);
  public:

  // uint32 uiGateId = 8;
  void clear_uigateid();
  uint32_t uigateid() const;
  void set_uigateid(uint32_t value);
  private:
  uint32_t _internal_uigateid() const;
  void _internal_set_uigateid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Svr_Player_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strplayername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strdevid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strchannel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strclientip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcitycode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr straccname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strappversion_;
  int64_t llplayerid_;
  uint32_t uilevel_;
  uint32_t uigender_;
  int64_t lllogouttime_;
  int eplayerstatus_;
  uint32_t uigameid_;
  int64_t lllogintime_;
  uint32_t uigateid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Svr_Player_Info

// int64 llPlayerId = 1;
inline void Svr_Player_Info::clear_llplayerid() {
  llplayerid_ = int64_t{0};
}
inline int64_t Svr_Player_Info::_internal_llplayerid() const {
  return llplayerid_;
}
inline int64_t Svr_Player_Info::llplayerid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.llPlayerId)
  return _internal_llplayerid();
}
inline void Svr_Player_Info::_internal_set_llplayerid(int64_t value) {
  
  llplayerid_ = value;
}
inline void Svr_Player_Info::set_llplayerid(int64_t value) {
  _internal_set_llplayerid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.llPlayerId)
}

// string strPlayerName = 2;
inline void Svr_Player_Info::clear_strplayername() {
  strplayername_.ClearToEmpty();
}
inline const std::string& Svr_Player_Info::strplayername() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.strPlayerName)
  return _internal_strplayername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svr_Player_Info::set_strplayername(ArgT0&& arg0, ArgT... args) {
 
 strplayername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.strPlayerName)
}
inline std::string* Svr_Player_Info::mutable_strplayername() {
  std::string* _s = _internal_mutable_strplayername();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Svr_Player_Info.strPlayerName)
  return _s;
}
inline const std::string& Svr_Player_Info::_internal_strplayername() const {
  return strplayername_.Get();
}
inline void Svr_Player_Info::_internal_set_strplayername(const std::string& value) {
  
  strplayername_.Set(value, GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::_internal_mutable_strplayername() {
  
  return strplayername_.Mutable(GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::release_strplayername() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Svr_Player_Info.strPlayerName)
  return strplayername_.Release();
}
inline void Svr_Player_Info::set_allocated_strplayername(std::string* strplayername) {
  if (strplayername != nullptr) {
    
  } else {
    
  }
  strplayername_.SetAllocated(strplayername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strplayername_.IsDefault()) {
    strplayername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Svr_Player_Info.strPlayerName)
}

// uint32 uiLevel = 3;
inline void Svr_Player_Info::clear_uilevel() {
  uilevel_ = 0u;
}
inline uint32_t Svr_Player_Info::_internal_uilevel() const {
  return uilevel_;
}
inline uint32_t Svr_Player_Info::uilevel() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.uiLevel)
  return _internal_uilevel();
}
inline void Svr_Player_Info::_internal_set_uilevel(uint32_t value) {
  
  uilevel_ = value;
}
inline void Svr_Player_Info::set_uilevel(uint32_t value) {
  _internal_set_uilevel(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.uiLevel)
}

// uint32 uiGender = 4;
inline void Svr_Player_Info::clear_uigender() {
  uigender_ = 0u;
}
inline uint32_t Svr_Player_Info::_internal_uigender() const {
  return uigender_;
}
inline uint32_t Svr_Player_Info::uigender() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.uiGender)
  return _internal_uigender();
}
inline void Svr_Player_Info::_internal_set_uigender(uint32_t value) {
  
  uigender_ = value;
}
inline void Svr_Player_Info::set_uigender(uint32_t value) {
  _internal_set_uigender(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.uiGender)
}

// .ProtoMsg.EPlayerStatus ePlayerStatus = 5;
inline void Svr_Player_Info::clear_eplayerstatus() {
  eplayerstatus_ = 0;
}
inline ::ProtoMsg::EPlayerStatus Svr_Player_Info::_internal_eplayerstatus() const {
  return static_cast< ::ProtoMsg::EPlayerStatus >(eplayerstatus_);
}
inline ::ProtoMsg::EPlayerStatus Svr_Player_Info::eplayerstatus() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.ePlayerStatus)
  return _internal_eplayerstatus();
}
inline void Svr_Player_Info::_internal_set_eplayerstatus(::ProtoMsg::EPlayerStatus value) {
  
  eplayerstatus_ = value;
}
inline void Svr_Player_Info::set_eplayerstatus(::ProtoMsg::EPlayerStatus value) {
  _internal_set_eplayerstatus(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.ePlayerStatus)
}

// int64 llLogoutTime = 6;
inline void Svr_Player_Info::clear_lllogouttime() {
  lllogouttime_ = int64_t{0};
}
inline int64_t Svr_Player_Info::_internal_lllogouttime() const {
  return lllogouttime_;
}
inline int64_t Svr_Player_Info::lllogouttime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.llLogoutTime)
  return _internal_lllogouttime();
}
inline void Svr_Player_Info::_internal_set_lllogouttime(int64_t value) {
  
  lllogouttime_ = value;
}
inline void Svr_Player_Info::set_lllogouttime(int64_t value) {
  _internal_set_lllogouttime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.llLogoutTime)
}

// uint32 uiGameId = 7;
inline void Svr_Player_Info::clear_uigameid() {
  uigameid_ = 0u;
}
inline uint32_t Svr_Player_Info::_internal_uigameid() const {
  return uigameid_;
}
inline uint32_t Svr_Player_Info::uigameid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.uiGameId)
  return _internal_uigameid();
}
inline void Svr_Player_Info::_internal_set_uigameid(uint32_t value) {
  
  uigameid_ = value;
}
inline void Svr_Player_Info::set_uigameid(uint32_t value) {
  _internal_set_uigameid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.uiGameId)
}

// uint32 uiGateId = 8;
inline void Svr_Player_Info::clear_uigateid() {
  uigateid_ = 0u;
}
inline uint32_t Svr_Player_Info::_internal_uigateid() const {
  return uigateid_;
}
inline uint32_t Svr_Player_Info::uigateid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.uiGateId)
  return _internal_uigateid();
}
inline void Svr_Player_Info::_internal_set_uigateid(uint32_t value) {
  
  uigateid_ = value;
}
inline void Svr_Player_Info::set_uigateid(uint32_t value) {
  _internal_set_uigateid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.uiGateId)
}

// string strDevId = 9;
inline void Svr_Player_Info::clear_strdevid() {
  strdevid_.ClearToEmpty();
}
inline const std::string& Svr_Player_Info::strdevid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.strDevId)
  return _internal_strdevid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svr_Player_Info::set_strdevid(ArgT0&& arg0, ArgT... args) {
 
 strdevid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.strDevId)
}
inline std::string* Svr_Player_Info::mutable_strdevid() {
  std::string* _s = _internal_mutable_strdevid();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Svr_Player_Info.strDevId)
  return _s;
}
inline const std::string& Svr_Player_Info::_internal_strdevid() const {
  return strdevid_.Get();
}
inline void Svr_Player_Info::_internal_set_strdevid(const std::string& value) {
  
  strdevid_.Set(value, GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::_internal_mutable_strdevid() {
  
  return strdevid_.Mutable(GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::release_strdevid() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Svr_Player_Info.strDevId)
  return strdevid_.Release();
}
inline void Svr_Player_Info::set_allocated_strdevid(std::string* strdevid) {
  if (strdevid != nullptr) {
    
  } else {
    
  }
  strdevid_.SetAllocated(strdevid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strdevid_.IsDefault()) {
    strdevid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Svr_Player_Info.strDevId)
}

// string strChannel = 10;
inline void Svr_Player_Info::clear_strchannel() {
  strchannel_.ClearToEmpty();
}
inline const std::string& Svr_Player_Info::strchannel() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.strChannel)
  return _internal_strchannel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svr_Player_Info::set_strchannel(ArgT0&& arg0, ArgT... args) {
 
 strchannel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.strChannel)
}
inline std::string* Svr_Player_Info::mutable_strchannel() {
  std::string* _s = _internal_mutable_strchannel();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Svr_Player_Info.strChannel)
  return _s;
}
inline const std::string& Svr_Player_Info::_internal_strchannel() const {
  return strchannel_.Get();
}
inline void Svr_Player_Info::_internal_set_strchannel(const std::string& value) {
  
  strchannel_.Set(value, GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::_internal_mutable_strchannel() {
  
  return strchannel_.Mutable(GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::release_strchannel() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Svr_Player_Info.strChannel)
  return strchannel_.Release();
}
inline void Svr_Player_Info::set_allocated_strchannel(std::string* strchannel) {
  if (strchannel != nullptr) {
    
  } else {
    
  }
  strchannel_.SetAllocated(strchannel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strchannel_.IsDefault()) {
    strchannel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Svr_Player_Info.strChannel)
}

// string strClientIp = 11;
inline void Svr_Player_Info::clear_strclientip() {
  strclientip_.ClearToEmpty();
}
inline const std::string& Svr_Player_Info::strclientip() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.strClientIp)
  return _internal_strclientip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svr_Player_Info::set_strclientip(ArgT0&& arg0, ArgT... args) {
 
 strclientip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.strClientIp)
}
inline std::string* Svr_Player_Info::mutable_strclientip() {
  std::string* _s = _internal_mutable_strclientip();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Svr_Player_Info.strClientIp)
  return _s;
}
inline const std::string& Svr_Player_Info::_internal_strclientip() const {
  return strclientip_.Get();
}
inline void Svr_Player_Info::_internal_set_strclientip(const std::string& value) {
  
  strclientip_.Set(value, GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::_internal_mutable_strclientip() {
  
  return strclientip_.Mutable(GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::release_strclientip() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Svr_Player_Info.strClientIp)
  return strclientip_.Release();
}
inline void Svr_Player_Info::set_allocated_strclientip(std::string* strclientip) {
  if (strclientip != nullptr) {
    
  } else {
    
  }
  strclientip_.SetAllocated(strclientip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strclientip_.IsDefault()) {
    strclientip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Svr_Player_Info.strClientIp)
}

// string strCityCode = 12;
inline void Svr_Player_Info::clear_strcitycode() {
  strcitycode_.ClearToEmpty();
}
inline const std::string& Svr_Player_Info::strcitycode() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.strCityCode)
  return _internal_strcitycode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svr_Player_Info::set_strcitycode(ArgT0&& arg0, ArgT... args) {
 
 strcitycode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.strCityCode)
}
inline std::string* Svr_Player_Info::mutable_strcitycode() {
  std::string* _s = _internal_mutable_strcitycode();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Svr_Player_Info.strCityCode)
  return _s;
}
inline const std::string& Svr_Player_Info::_internal_strcitycode() const {
  return strcitycode_.Get();
}
inline void Svr_Player_Info::_internal_set_strcitycode(const std::string& value) {
  
  strcitycode_.Set(value, GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::_internal_mutable_strcitycode() {
  
  return strcitycode_.Mutable(GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::release_strcitycode() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Svr_Player_Info.strCityCode)
  return strcitycode_.Release();
}
inline void Svr_Player_Info::set_allocated_strcitycode(std::string* strcitycode) {
  if (strcitycode != nullptr) {
    
  } else {
    
  }
  strcitycode_.SetAllocated(strcitycode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strcitycode_.IsDefault()) {
    strcitycode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Svr_Player_Info.strCityCode)
}

// string strAccName = 13;
inline void Svr_Player_Info::clear_straccname() {
  straccname_.ClearToEmpty();
}
inline const std::string& Svr_Player_Info::straccname() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.strAccName)
  return _internal_straccname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svr_Player_Info::set_straccname(ArgT0&& arg0, ArgT... args) {
 
 straccname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.strAccName)
}
inline std::string* Svr_Player_Info::mutable_straccname() {
  std::string* _s = _internal_mutable_straccname();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Svr_Player_Info.strAccName)
  return _s;
}
inline const std::string& Svr_Player_Info::_internal_straccname() const {
  return straccname_.Get();
}
inline void Svr_Player_Info::_internal_set_straccname(const std::string& value) {
  
  straccname_.Set(value, GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::_internal_mutable_straccname() {
  
  return straccname_.Mutable(GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::release_straccname() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Svr_Player_Info.strAccName)
  return straccname_.Release();
}
inline void Svr_Player_Info::set_allocated_straccname(std::string* straccname) {
  if (straccname != nullptr) {
    
  } else {
    
  }
  straccname_.SetAllocated(straccname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (straccname_.IsDefault()) {
    straccname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Svr_Player_Info.strAccName)
}

// string strAppVersion = 14;
inline void Svr_Player_Info::clear_strappversion() {
  strappversion_.ClearToEmpty();
}
inline const std::string& Svr_Player_Info::strappversion() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.strAppVersion)
  return _internal_strappversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svr_Player_Info::set_strappversion(ArgT0&& arg0, ArgT... args) {
 
 strappversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.strAppVersion)
}
inline std::string* Svr_Player_Info::mutable_strappversion() {
  std::string* _s = _internal_mutable_strappversion();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Svr_Player_Info.strAppVersion)
  return _s;
}
inline const std::string& Svr_Player_Info::_internal_strappversion() const {
  return strappversion_.Get();
}
inline void Svr_Player_Info::_internal_set_strappversion(const std::string& value) {
  
  strappversion_.Set(value, GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::_internal_mutable_strappversion() {
  
  return strappversion_.Mutable(GetArenaForAllocation());
}
inline std::string* Svr_Player_Info::release_strappversion() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Svr_Player_Info.strAppVersion)
  return strappversion_.Release();
}
inline void Svr_Player_Info::set_allocated_strappversion(std::string* strappversion) {
  if (strappversion != nullptr) {
    
  } else {
    
  }
  strappversion_.SetAllocated(strappversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strappversion_.IsDefault()) {
    strappversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Svr_Player_Info.strAppVersion)
}

// int64 llLoginTime = 15;
inline void Svr_Player_Info::clear_lllogintime() {
  lllogintime_ = int64_t{0};
}
inline int64_t Svr_Player_Info::_internal_lllogintime() const {
  return lllogintime_;
}
inline int64_t Svr_Player_Info::lllogintime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Svr_Player_Info.llLoginTime)
  return _internal_lllogintime();
}
inline void Svr_Player_Info::_internal_set_lllogintime(int64_t value) {
  
  lllogintime_ = value;
}
inline void Svr_Player_Info::set_lllogintime(int64_t value) {
  _internal_set_lllogintime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Svr_Player_Info.llLoginTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fcommon_2eproto
