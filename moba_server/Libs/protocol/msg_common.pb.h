// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fcommon_2eproto;
namespace ProtoMsg {
class game_item_t;
struct game_item_tDefaultTypeInternal;
extern game_item_tDefaultTypeInternal _game_item_t_default_instance_;
class hero_common_info_t;
struct hero_common_info_tDefaultTypeInternal;
extern hero_common_info_tDefaultTypeInternal _hero_common_info_t_default_instance_;
class user_battle_info_t;
struct user_battle_info_tDefaultTypeInternal;
extern user_battle_info_tDefaultTypeInternal _user_battle_info_t_default_instance_;
class user_battle_result_t;
struct user_battle_result_tDefaultTypeInternal;
extern user_battle_result_tDefaultTypeInternal _user_battle_result_t_default_instance_;
class user_common_info_t;
struct user_common_info_tDefaultTypeInternal;
extern user_common_info_tDefaultTypeInternal _user_common_info_t_default_instance_;
}  // namespace ProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMsg::game_item_t* Arena::CreateMaybeMessage<::ProtoMsg::game_item_t>(Arena*);
template<> ::ProtoMsg::hero_common_info_t* Arena::CreateMaybeMessage<::ProtoMsg::hero_common_info_t>(Arena*);
template<> ::ProtoMsg::user_battle_info_t* Arena::CreateMaybeMessage<::ProtoMsg::user_battle_info_t>(Arena*);
template<> ::ProtoMsg::user_battle_result_t* Arena::CreateMaybeMessage<::ProtoMsg::user_battle_result_t>(Arena*);
template<> ::ProtoMsg::user_common_info_t* Arena::CreateMaybeMessage<::ProtoMsg::user_common_info_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMsg {

enum EPlayerStatus : int {
  ePlayer_Offline = 0,
  ePlayer_Online = 1,
  ePlayer_InBattle = 2,
  EPlayerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EPlayerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EPlayerStatus_IsValid(int value);
constexpr EPlayerStatus EPlayerStatus_MIN = ePlayer_Offline;
constexpr EPlayerStatus EPlayerStatus_MAX = ePlayer_InBattle;
constexpr int EPlayerStatus_ARRAYSIZE = EPlayerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerStatus_descriptor();
template<typename T>
inline const std::string& EPlayerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlayerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlayerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlayerStatus_descriptor(), enum_t_value);
}
inline bool EPlayerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPlayerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlayerStatus>(
    EPlayerStatus_descriptor(), name, value);
}
enum ERoomType : int {
  ERoomType_None = 0,
  ERoomType_PVP_Leisure = 1,
  ERoomType_PVP_1V1 = 2,
  ERoomType_PVP_2V2 = 3,
  ERoomType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ERoomType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ERoomType_IsValid(int value);
constexpr ERoomType ERoomType_MIN = ERoomType_None;
constexpr ERoomType ERoomType_MAX = ERoomType_PVP_2V2;
constexpr int ERoomType_ARRAYSIZE = ERoomType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERoomType_descriptor();
template<typename T>
inline const std::string& ERoomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERoomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERoomType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERoomType_descriptor(), enum_t_value);
}
inline bool ERoomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERoomType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERoomType>(
    ERoomType_descriptor(), name, value);
}
enum ELeisureType : int {
  ELeisureType_None = 0,
  ELeisureType_Melee = 1,
  ELeisureType_Stronghold = 2,
  ELeisureType_RandBoss = 3,
  ELeisureType_RandGundam = 4,
  ELeisureType_BanGundam = 5,
  ELeisureType_UnlimitedFire = 6,
  ELeisureType_SingleBattle = 7,
  ELeisureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ELeisureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ELeisureType_IsValid(int value);
constexpr ELeisureType ELeisureType_MIN = ELeisureType_None;
constexpr ELeisureType ELeisureType_MAX = ELeisureType_SingleBattle;
constexpr int ELeisureType_ARRAYSIZE = ELeisureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELeisureType_descriptor();
template<typename T>
inline const std::string& ELeisureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELeisureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELeisureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELeisureType_descriptor(), enum_t_value);
}
inline bool ELeisureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELeisureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELeisureType>(
    ELeisureType_descriptor(), name, value);
}
enum ERoomStatus : int {
  ERoomStatus_None = 0,
  ERoomStatus_Start = 1,
  ERoomStatus_Run = 2,
  ERoomStatus_End = 3,
  ERoomStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ERoomStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ERoomStatus_IsValid(int value);
constexpr ERoomStatus ERoomStatus_MIN = ERoomStatus_None;
constexpr ERoomStatus ERoomStatus_MAX = ERoomStatus_End;
constexpr int ERoomStatus_ARRAYSIZE = ERoomStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERoomStatus_descriptor();
template<typename T>
inline const std::string& ERoomStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERoomStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERoomStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERoomStatus_descriptor(), enum_t_value);
}
inline bool ERoomStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERoomStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERoomStatus>(
    ERoomStatus_descriptor(), name, value);
}
enum ERobotType : int {
  ERobotType_None = 0,
  ERobotType_Level1 = 1,
  ERobotType_Level2 = 2,
  ERobotType_Level3 = 3,
  ERobotType_Level4 = 4,
  ERobotType_Level5 = 5,
  ERobotType_Level6 = 6,
  ERobotType_Level7 = 100,
  ERobotType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ERobotType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ERobotType_IsValid(int value);
constexpr ERobotType ERobotType_MIN = ERobotType_None;
constexpr ERobotType ERobotType_MAX = ERobotType_Level7;
constexpr int ERobotType_ARRAYSIZE = ERobotType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERobotType_descriptor();
template<typename T>
inline const std::string& ERobotType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERobotType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERobotType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERobotType_descriptor(), enum_t_value);
}
inline bool ERobotType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERobotType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERobotType>(
    ERobotType_descriptor(), name, value);
}
enum EBattleResult : int {
  EBattleResult_None = 0,
  EBattleResult_Win = 1,
  EBattleResult_Lose = 2,
  EBattleResult_DagFall = 3,
  EBattleResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EBattleResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EBattleResult_IsValid(int value);
constexpr EBattleResult EBattleResult_MIN = EBattleResult_None;
constexpr EBattleResult EBattleResult_MAX = EBattleResult_DagFall;
constexpr int EBattleResult_ARRAYSIZE = EBattleResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBattleResult_descriptor();
template<typename T>
inline const std::string& EBattleResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBattleResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBattleResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBattleResult_descriptor(), enum_t_value);
}
inline bool EBattleResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBattleResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBattleResult>(
    EBattleResult_descriptor(), name, value);
}
enum EBRCode : int {
  EBRCode_Success = 0,
  EBRCode_Diff = 1,
  EEBRCode_WinSame = 2,
  EBRCode_PvgDiff = 3,
  EBRCode_Empty = 4,
  EBRCode_Timeout = 5,
  EBRCode_NoStart = 6,
  EBRCode_Oper = 7,
  EBRCode_ResTimeout = 8,
  EBRCode_OfflineDiff = 9,
  EBRCode_OfflineTimeout = 10,
  EBRCode_OneunSync = 11,
  EBRCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EBRCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EBRCode_IsValid(int value);
constexpr EBRCode EBRCode_MIN = EBRCode_Success;
constexpr EBRCode EBRCode_MAX = EBRCode_OneunSync;
constexpr int EBRCode_ARRAYSIZE = EBRCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBRCode_descriptor();
template<typename T>
inline const std::string& EBRCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBRCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBRCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBRCode_descriptor(), enum_t_value);
}
inline bool EBRCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBRCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBRCode>(
    EBRCode_descriptor(), name, value);
}
// ===================================================================

class game_item_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.game_item_t) */ {
 public:
  inline game_item_t() : game_item_t(nullptr) {}
  ~game_item_t() override;
  explicit PROTOBUF_CONSTEXPR game_item_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  game_item_t(const game_item_t& from);
  game_item_t(game_item_t&& from) noexcept
    : game_item_t() {
    *this = ::std::move(from);
  }

  inline game_item_t& operator=(const game_item_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_item_t& operator=(game_item_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const game_item_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const game_item_t* internal_default_instance() {
    return reinterpret_cast<const game_item_t*>(
               &_game_item_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(game_item_t& a, game_item_t& b) {
    a.Swap(&b);
  }
  inline void Swap(game_item_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(game_item_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  game_item_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<game_item_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const game_item_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const game_item_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(game_item_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.game_item_t";
  }
  protected:
  explicit game_item_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiIdFieldNumber = 1,
    kUiNumFieldNumber = 2,
    kLlTimeFieldNumber = 3,
  };
  // uint32 uiId = 1;
  void clear_uiid();
  uint32_t uiid() const;
  void set_uiid(uint32_t value);
  private:
  uint32_t _internal_uiid() const;
  void _internal_set_uiid(uint32_t value);
  public:

  // uint32 uiNum = 2;
  void clear_uinum();
  uint32_t uinum() const;
  void set_uinum(uint32_t value);
  private:
  uint32_t _internal_uinum() const;
  void _internal_set_uinum(uint32_t value);
  public:

  // int64 llTime = 3;
  void clear_lltime();
  int64_t lltime() const;
  void set_lltime(int64_t value);
  private:
  int64_t _internal_lltime() const;
  void _internal_set_lltime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.game_item_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uiid_;
  uint32_t uinum_;
  int64_t lltime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class hero_common_info_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.hero_common_info_t) */ {
 public:
  inline hero_common_info_t() : hero_common_info_t(nullptr) {}
  ~hero_common_info_t() override;
  explicit PROTOBUF_CONSTEXPR hero_common_info_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  hero_common_info_t(const hero_common_info_t& from);
  hero_common_info_t(hero_common_info_t&& from) noexcept
    : hero_common_info_t() {
    *this = ::std::move(from);
  }

  inline hero_common_info_t& operator=(const hero_common_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline hero_common_info_t& operator=(hero_common_info_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const hero_common_info_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const hero_common_info_t* internal_default_instance() {
    return reinterpret_cast<const hero_common_info_t*>(
               &_hero_common_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(hero_common_info_t& a, hero_common_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(hero_common_info_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hero_common_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  hero_common_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<hero_common_info_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const hero_common_info_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const hero_common_info_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hero_common_info_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.hero_common_info_t";
  }
  protected:
  explicit hero_common_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIHeroIdFieldNumber = 1,
    kILevelFieldNumber = 2,
    kIStarFieldNumber = 3,
  };
  // int32 iHeroId = 1;
  void clear_iheroid();
  int32_t iheroid() const;
  void set_iheroid(int32_t value);
  private:
  int32_t _internal_iheroid() const;
  void _internal_set_iheroid(int32_t value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  int32_t ilevel() const;
  void set_ilevel(int32_t value);
  private:
  int32_t _internal_ilevel() const;
  void _internal_set_ilevel(int32_t value);
  public:

  // int32 iStar = 3;
  void clear_istar();
  int32_t istar() const;
  void set_istar(int32_t value);
  private:
  int32_t _internal_istar() const;
  void _internal_set_istar(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.hero_common_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t iheroid_;
  int32_t ilevel_;
  int32_t istar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class user_common_info_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.user_common_info_t) */ {
 public:
  inline user_common_info_t() : user_common_info_t(nullptr) {}
  ~user_common_info_t() override;
  explicit PROTOBUF_CONSTEXPR user_common_info_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_common_info_t(const user_common_info_t& from);
  user_common_info_t(user_common_info_t&& from) noexcept
    : user_common_info_t() {
    *this = ::std::move(from);
  }

  inline user_common_info_t& operator=(const user_common_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_common_info_t& operator=(user_common_info_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user_common_info_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_common_info_t* internal_default_instance() {
    return reinterpret_cast<const user_common_info_t*>(
               &_user_common_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(user_common_info_t& a, user_common_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(user_common_info_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_common_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  user_common_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<user_common_info_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user_common_info_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const user_common_info_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_common_info_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.user_common_info_t";
  }
  protected:
  explicit user_common_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecHerosFieldNumber = 5,
    kStrNameFieldNumber = 3,
    kLlUidFieldNumber = 1,
    kIPosFieldNumber = 2,
    kILevelFieldNumber = 4,
    kERobotTypeFieldNumber = 6,
    kISideFieldNumber = 7,
  };
  // repeated .ProtoMsg.hero_common_info_t vecHeros = 5;
  int vecheros_size() const;
  private:
  int _internal_vecheros_size() const;
  public:
  void clear_vecheros();
  ::ProtoMsg::hero_common_info_t* mutable_vecheros(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::hero_common_info_t >*
      mutable_vecheros();
  private:
  const ::ProtoMsg::hero_common_info_t& _internal_vecheros(int index) const;
  ::ProtoMsg::hero_common_info_t* _internal_add_vecheros();
  public:
  const ::ProtoMsg::hero_common_info_t& vecheros(int index) const;
  ::ProtoMsg::hero_common_info_t* add_vecheros();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::hero_common_info_t >&
      vecheros() const;

  // string strName = 3;
  void clear_strname();
  const std::string& strname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strname();
  PROTOBUF_NODISCARD std::string* release_strname();
  void set_allocated_strname(std::string* strname);
  private:
  const std::string& _internal_strname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strname(const std::string& value);
  std::string* _internal_mutable_strname();
  public:

  // int64 llUid = 1;
  void clear_lluid();
  int64_t lluid() const;
  void set_lluid(int64_t value);
  private:
  int64_t _internal_lluid() const;
  void _internal_set_lluid(int64_t value);
  public:

  // int32 iPos = 2;
  void clear_ipos();
  int32_t ipos() const;
  void set_ipos(int32_t value);
  private:
  int32_t _internal_ipos() const;
  void _internal_set_ipos(int32_t value);
  public:

  // int32 iLevel = 4;
  void clear_ilevel();
  int32_t ilevel() const;
  void set_ilevel(int32_t value);
  private:
  int32_t _internal_ilevel() const;
  void _internal_set_ilevel(int32_t value);
  public:

  // .ProtoMsg.ERobotType eRobotType = 6;
  void clear_erobottype();
  ::ProtoMsg::ERobotType erobottype() const;
  void set_erobottype(::ProtoMsg::ERobotType value);
  private:
  ::ProtoMsg::ERobotType _internal_erobottype() const;
  void _internal_set_erobottype(::ProtoMsg::ERobotType value);
  public:

  // int32 iSide = 7;
  void clear_iside();
  int32_t iside() const;
  void set_iside(int32_t value);
  private:
  int32_t _internal_iside() const;
  void _internal_set_iside(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.user_common_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::hero_common_info_t > vecheros_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strname_;
  int64_t lluid_;
  int32_t ipos_;
  int32_t ilevel_;
  int erobottype_;
  int32_t iside_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class user_battle_info_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.user_battle_info_t) */ {
 public:
  inline user_battle_info_t() : user_battle_info_t(nullptr) {}
  ~user_battle_info_t() override;
  explicit PROTOBUF_CONSTEXPR user_battle_info_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_battle_info_t(const user_battle_info_t& from);
  user_battle_info_t(user_battle_info_t&& from) noexcept
    : user_battle_info_t() {
    *this = ::std::move(from);
  }

  inline user_battle_info_t& operator=(const user_battle_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_battle_info_t& operator=(user_battle_info_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user_battle_info_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_battle_info_t* internal_default_instance() {
    return reinterpret_cast<const user_battle_info_t*>(
               &_user_battle_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(user_battle_info_t& a, user_battle_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(user_battle_info_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_battle_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  user_battle_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<user_battle_info_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user_battle_info_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const user_battle_info_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_battle_info_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.user_battle_info_t";
  }
  protected:
  explicit user_battle_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrUserSessionIdFieldNumber = 1,
    kOUserInfoFieldNumber = 2,
    kIMatchSecFieldNumber = 3,
    kBObFieldNumber = 4,
    kIConvIdFieldNumber = 5,
  };
  // string strUserSessionId = 1;
  void clear_strusersessionid();
  const std::string& strusersessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strusersessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strusersessionid();
  PROTOBUF_NODISCARD std::string* release_strusersessionid();
  void set_allocated_strusersessionid(std::string* strusersessionid);
  private:
  const std::string& _internal_strusersessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strusersessionid(const std::string& value);
  std::string* _internal_mutable_strusersessionid();
  public:

  // .ProtoMsg.user_common_info_t oUserInfo = 2;
  bool has_ouserinfo() const;
  private:
  bool _internal_has_ouserinfo() const;
  public:
  void clear_ouserinfo();
  const ::ProtoMsg::user_common_info_t& ouserinfo() const;
  PROTOBUF_NODISCARD ::ProtoMsg::user_common_info_t* release_ouserinfo();
  ::ProtoMsg::user_common_info_t* mutable_ouserinfo();
  void set_allocated_ouserinfo(::ProtoMsg::user_common_info_t* ouserinfo);
  private:
  const ::ProtoMsg::user_common_info_t& _internal_ouserinfo() const;
  ::ProtoMsg::user_common_info_t* _internal_mutable_ouserinfo();
  public:
  void unsafe_arena_set_allocated_ouserinfo(
      ::ProtoMsg::user_common_info_t* ouserinfo);
  ::ProtoMsg::user_common_info_t* unsafe_arena_release_ouserinfo();

  // int32 iMatchSec = 3;
  void clear_imatchsec();
  int32_t imatchsec() const;
  void set_imatchsec(int32_t value);
  private:
  int32_t _internal_imatchsec() const;
  void _internal_set_imatchsec(int32_t value);
  public:

  // bool bOb = 4;
  void clear_bob();
  bool bob() const;
  void set_bob(bool value);
  private:
  bool _internal_bob() const;
  void _internal_set_bob(bool value);
  public:

  // int32 iConvId = 5;
  void clear_iconvid();
  int32_t iconvid() const;
  void set_iconvid(int32_t value);
  private:
  int32_t _internal_iconvid() const;
  void _internal_set_iconvid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.user_battle_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strusersessionid_;
  ::ProtoMsg::user_common_info_t* ouserinfo_;
  int32_t imatchsec_;
  bool bob_;
  int32_t iconvid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class user_battle_result_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.user_battle_result_t) */ {
 public:
  inline user_battle_result_t() : user_battle_result_t(nullptr) {}
  ~user_battle_result_t() override;
  explicit PROTOBUF_CONSTEXPR user_battle_result_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_battle_result_t(const user_battle_result_t& from);
  user_battle_result_t(user_battle_result_t&& from) noexcept
    : user_battle_result_t() {
    *this = ::std::move(from);
  }

  inline user_battle_result_t& operator=(const user_battle_result_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_battle_result_t& operator=(user_battle_result_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user_battle_result_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_battle_result_t* internal_default_instance() {
    return reinterpret_cast<const user_battle_result_t*>(
               &_user_battle_result_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(user_battle_result_t& a, user_battle_result_t& b) {
    a.Swap(&b);
  }
  inline void Swap(user_battle_result_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_battle_result_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  user_battle_result_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<user_battle_result_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user_battle_result_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const user_battle_result_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_battle_result_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.user_battle_result_t";
  }
  protected:
  explicit user_battle_result_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlUidFieldNumber = 1,
    kIPositionFieldNumber = 2,
    kEResultFieldNumber = 3,
    kLlEndTimeFieldNumber = 4,
  };
  // int64 llUid = 1;
  void clear_lluid();
  int64_t lluid() const;
  void set_lluid(int64_t value);
  private:
  int64_t _internal_lluid() const;
  void _internal_set_lluid(int64_t value);
  public:

  // int32 iPosition = 2;
  void clear_iposition();
  int32_t iposition() const;
  void set_iposition(int32_t value);
  private:
  int32_t _internal_iposition() const;
  void _internal_set_iposition(int32_t value);
  public:

  // .ProtoMsg.EBattleResult eResult = 3;
  void clear_eresult();
  ::ProtoMsg::EBattleResult eresult() const;
  void set_eresult(::ProtoMsg::EBattleResult value);
  private:
  ::ProtoMsg::EBattleResult _internal_eresult() const;
  void _internal_set_eresult(::ProtoMsg::EBattleResult value);
  public:

  // int64 llEndTime = 4;
  void clear_llendtime();
  int64_t llendtime() const;
  void set_llendtime(int64_t value);
  private:
  int64_t _internal_llendtime() const;
  void _internal_set_llendtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.user_battle_result_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t lluid_;
  int32_t iposition_;
  int eresult_;
  int64_t llendtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// game_item_t

// uint32 uiId = 1;
inline void game_item_t::clear_uiid() {
  uiid_ = 0u;
}
inline uint32_t game_item_t::_internal_uiid() const {
  return uiid_;
}
inline uint32_t game_item_t::uiid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.game_item_t.uiId)
  return _internal_uiid();
}
inline void game_item_t::_internal_set_uiid(uint32_t value) {
  
  uiid_ = value;
}
inline void game_item_t::set_uiid(uint32_t value) {
  _internal_set_uiid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.game_item_t.uiId)
}

// uint32 uiNum = 2;
inline void game_item_t::clear_uinum() {
  uinum_ = 0u;
}
inline uint32_t game_item_t::_internal_uinum() const {
  return uinum_;
}
inline uint32_t game_item_t::uinum() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.game_item_t.uiNum)
  return _internal_uinum();
}
inline void game_item_t::_internal_set_uinum(uint32_t value) {
  
  uinum_ = value;
}
inline void game_item_t::set_uinum(uint32_t value) {
  _internal_set_uinum(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.game_item_t.uiNum)
}

// int64 llTime = 3;
inline void game_item_t::clear_lltime() {
  lltime_ = int64_t{0};
}
inline int64_t game_item_t::_internal_lltime() const {
  return lltime_;
}
inline int64_t game_item_t::lltime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.game_item_t.llTime)
  return _internal_lltime();
}
inline void game_item_t::_internal_set_lltime(int64_t value) {
  
  lltime_ = value;
}
inline void game_item_t::set_lltime(int64_t value) {
  _internal_set_lltime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.game_item_t.llTime)
}

// -------------------------------------------------------------------

// hero_common_info_t

// int32 iHeroId = 1;
inline void hero_common_info_t::clear_iheroid() {
  iheroid_ = 0;
}
inline int32_t hero_common_info_t::_internal_iheroid() const {
  return iheroid_;
}
inline int32_t hero_common_info_t::iheroid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.hero_common_info_t.iHeroId)
  return _internal_iheroid();
}
inline void hero_common_info_t::_internal_set_iheroid(int32_t value) {
  
  iheroid_ = value;
}
inline void hero_common_info_t::set_iheroid(int32_t value) {
  _internal_set_iheroid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.hero_common_info_t.iHeroId)
}

// int32 iLevel = 2;
inline void hero_common_info_t::clear_ilevel() {
  ilevel_ = 0;
}
inline int32_t hero_common_info_t::_internal_ilevel() const {
  return ilevel_;
}
inline int32_t hero_common_info_t::ilevel() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.hero_common_info_t.iLevel)
  return _internal_ilevel();
}
inline void hero_common_info_t::_internal_set_ilevel(int32_t value) {
  
  ilevel_ = value;
}
inline void hero_common_info_t::set_ilevel(int32_t value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.hero_common_info_t.iLevel)
}

// int32 iStar = 3;
inline void hero_common_info_t::clear_istar() {
  istar_ = 0;
}
inline int32_t hero_common_info_t::_internal_istar() const {
  return istar_;
}
inline int32_t hero_common_info_t::istar() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.hero_common_info_t.iStar)
  return _internal_istar();
}
inline void hero_common_info_t::_internal_set_istar(int32_t value) {
  
  istar_ = value;
}
inline void hero_common_info_t::set_istar(int32_t value) {
  _internal_set_istar(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.hero_common_info_t.iStar)
}

// -------------------------------------------------------------------

// user_common_info_t

// int64 llUid = 1;
inline void user_common_info_t::clear_lluid() {
  lluid_ = int64_t{0};
}
inline int64_t user_common_info_t::_internal_lluid() const {
  return lluid_;
}
inline int64_t user_common_info_t::lluid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_common_info_t.llUid)
  return _internal_lluid();
}
inline void user_common_info_t::_internal_set_lluid(int64_t value) {
  
  lluid_ = value;
}
inline void user_common_info_t::set_lluid(int64_t value) {
  _internal_set_lluid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_common_info_t.llUid)
}

// int32 iPos = 2;
inline void user_common_info_t::clear_ipos() {
  ipos_ = 0;
}
inline int32_t user_common_info_t::_internal_ipos() const {
  return ipos_;
}
inline int32_t user_common_info_t::ipos() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_common_info_t.iPos)
  return _internal_ipos();
}
inline void user_common_info_t::_internal_set_ipos(int32_t value) {
  
  ipos_ = value;
}
inline void user_common_info_t::set_ipos(int32_t value) {
  _internal_set_ipos(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_common_info_t.iPos)
}

// string strName = 3;
inline void user_common_info_t::clear_strname() {
  strname_.ClearToEmpty();
}
inline const std::string& user_common_info_t::strname() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_common_info_t.strName)
  return _internal_strname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_common_info_t::set_strname(ArgT0&& arg0, ArgT... args) {
 
 strname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.user_common_info_t.strName)
}
inline std::string* user_common_info_t::mutable_strname() {
  std::string* _s = _internal_mutable_strname();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.user_common_info_t.strName)
  return _s;
}
inline const std::string& user_common_info_t::_internal_strname() const {
  return strname_.Get();
}
inline void user_common_info_t::_internal_set_strname(const std::string& value) {
  
  strname_.Set(value, GetArenaForAllocation());
}
inline std::string* user_common_info_t::_internal_mutable_strname() {
  
  return strname_.Mutable(GetArenaForAllocation());
}
inline std::string* user_common_info_t::release_strname() {
  // @@protoc_insertion_point(field_release:ProtoMsg.user_common_info_t.strName)
  return strname_.Release();
}
inline void user_common_info_t::set_allocated_strname(std::string* strname) {
  if (strname != nullptr) {
    
  } else {
    
  }
  strname_.SetAllocated(strname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strname_.IsDefault()) {
    strname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.user_common_info_t.strName)
}

// int32 iLevel = 4;
inline void user_common_info_t::clear_ilevel() {
  ilevel_ = 0;
}
inline int32_t user_common_info_t::_internal_ilevel() const {
  return ilevel_;
}
inline int32_t user_common_info_t::ilevel() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_common_info_t.iLevel)
  return _internal_ilevel();
}
inline void user_common_info_t::_internal_set_ilevel(int32_t value) {
  
  ilevel_ = value;
}
inline void user_common_info_t::set_ilevel(int32_t value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_common_info_t.iLevel)
}

// repeated .ProtoMsg.hero_common_info_t vecHeros = 5;
inline int user_common_info_t::_internal_vecheros_size() const {
  return vecheros_.size();
}
inline int user_common_info_t::vecheros_size() const {
  return _internal_vecheros_size();
}
inline void user_common_info_t::clear_vecheros() {
  vecheros_.Clear();
}
inline ::ProtoMsg::hero_common_info_t* user_common_info_t::mutable_vecheros(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMsg.user_common_info_t.vecHeros)
  return vecheros_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::hero_common_info_t >*
user_common_info_t::mutable_vecheros() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMsg.user_common_info_t.vecHeros)
  return &vecheros_;
}
inline const ::ProtoMsg::hero_common_info_t& user_common_info_t::_internal_vecheros(int index) const {
  return vecheros_.Get(index);
}
inline const ::ProtoMsg::hero_common_info_t& user_common_info_t::vecheros(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_common_info_t.vecHeros)
  return _internal_vecheros(index);
}
inline ::ProtoMsg::hero_common_info_t* user_common_info_t::_internal_add_vecheros() {
  return vecheros_.Add();
}
inline ::ProtoMsg::hero_common_info_t* user_common_info_t::add_vecheros() {
  ::ProtoMsg::hero_common_info_t* _add = _internal_add_vecheros();
  // @@protoc_insertion_point(field_add:ProtoMsg.user_common_info_t.vecHeros)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMsg::hero_common_info_t >&
user_common_info_t::vecheros() const {
  // @@protoc_insertion_point(field_list:ProtoMsg.user_common_info_t.vecHeros)
  return vecheros_;
}

// .ProtoMsg.ERobotType eRobotType = 6;
inline void user_common_info_t::clear_erobottype() {
  erobottype_ = 0;
}
inline ::ProtoMsg::ERobotType user_common_info_t::_internal_erobottype() const {
  return static_cast< ::ProtoMsg::ERobotType >(erobottype_);
}
inline ::ProtoMsg::ERobotType user_common_info_t::erobottype() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_common_info_t.eRobotType)
  return _internal_erobottype();
}
inline void user_common_info_t::_internal_set_erobottype(::ProtoMsg::ERobotType value) {
  
  erobottype_ = value;
}
inline void user_common_info_t::set_erobottype(::ProtoMsg::ERobotType value) {
  _internal_set_erobottype(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_common_info_t.eRobotType)
}

// int32 iSide = 7;
inline void user_common_info_t::clear_iside() {
  iside_ = 0;
}
inline int32_t user_common_info_t::_internal_iside() const {
  return iside_;
}
inline int32_t user_common_info_t::iside() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_common_info_t.iSide)
  return _internal_iside();
}
inline void user_common_info_t::_internal_set_iside(int32_t value) {
  
  iside_ = value;
}
inline void user_common_info_t::set_iside(int32_t value) {
  _internal_set_iside(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_common_info_t.iSide)
}

// -------------------------------------------------------------------

// user_battle_info_t

// string strUserSessionId = 1;
inline void user_battle_info_t::clear_strusersessionid() {
  strusersessionid_.ClearToEmpty();
}
inline const std::string& user_battle_info_t::strusersessionid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_info_t.strUserSessionId)
  return _internal_strusersessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_battle_info_t::set_strusersessionid(ArgT0&& arg0, ArgT... args) {
 
 strusersessionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_info_t.strUserSessionId)
}
inline std::string* user_battle_info_t::mutable_strusersessionid() {
  std::string* _s = _internal_mutable_strusersessionid();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.user_battle_info_t.strUserSessionId)
  return _s;
}
inline const std::string& user_battle_info_t::_internal_strusersessionid() const {
  return strusersessionid_.Get();
}
inline void user_battle_info_t::_internal_set_strusersessionid(const std::string& value) {
  
  strusersessionid_.Set(value, GetArenaForAllocation());
}
inline std::string* user_battle_info_t::_internal_mutable_strusersessionid() {
  
  return strusersessionid_.Mutable(GetArenaForAllocation());
}
inline std::string* user_battle_info_t::release_strusersessionid() {
  // @@protoc_insertion_point(field_release:ProtoMsg.user_battle_info_t.strUserSessionId)
  return strusersessionid_.Release();
}
inline void user_battle_info_t::set_allocated_strusersessionid(std::string* strusersessionid) {
  if (strusersessionid != nullptr) {
    
  } else {
    
  }
  strusersessionid_.SetAllocated(strusersessionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strusersessionid_.IsDefault()) {
    strusersessionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.user_battle_info_t.strUserSessionId)
}

// .ProtoMsg.user_common_info_t oUserInfo = 2;
inline bool user_battle_info_t::_internal_has_ouserinfo() const {
  return this != internal_default_instance() && ouserinfo_ != nullptr;
}
inline bool user_battle_info_t::has_ouserinfo() const {
  return _internal_has_ouserinfo();
}
inline void user_battle_info_t::clear_ouserinfo() {
  if (GetArenaForAllocation() == nullptr && ouserinfo_ != nullptr) {
    delete ouserinfo_;
  }
  ouserinfo_ = nullptr;
}
inline const ::ProtoMsg::user_common_info_t& user_battle_info_t::_internal_ouserinfo() const {
  const ::ProtoMsg::user_common_info_t* p = ouserinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProtoMsg::user_common_info_t&>(
      ::ProtoMsg::_user_common_info_t_default_instance_);
}
inline const ::ProtoMsg::user_common_info_t& user_battle_info_t::ouserinfo() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_info_t.oUserInfo)
  return _internal_ouserinfo();
}
inline void user_battle_info_t::unsafe_arena_set_allocated_ouserinfo(
    ::ProtoMsg::user_common_info_t* ouserinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ouserinfo_);
  }
  ouserinfo_ = ouserinfo;
  if (ouserinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoMsg.user_battle_info_t.oUserInfo)
}
inline ::ProtoMsg::user_common_info_t* user_battle_info_t::release_ouserinfo() {
  
  ::ProtoMsg::user_common_info_t* temp = ouserinfo_;
  ouserinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProtoMsg::user_common_info_t* user_battle_info_t::unsafe_arena_release_ouserinfo() {
  // @@protoc_insertion_point(field_release:ProtoMsg.user_battle_info_t.oUserInfo)
  
  ::ProtoMsg::user_common_info_t* temp = ouserinfo_;
  ouserinfo_ = nullptr;
  return temp;
}
inline ::ProtoMsg::user_common_info_t* user_battle_info_t::_internal_mutable_ouserinfo() {
  
  if (ouserinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoMsg::user_common_info_t>(GetArenaForAllocation());
    ouserinfo_ = p;
  }
  return ouserinfo_;
}
inline ::ProtoMsg::user_common_info_t* user_battle_info_t::mutable_ouserinfo() {
  ::ProtoMsg::user_common_info_t* _msg = _internal_mutable_ouserinfo();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.user_battle_info_t.oUserInfo)
  return _msg;
}
inline void user_battle_info_t::set_allocated_ouserinfo(::ProtoMsg::user_common_info_t* ouserinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ouserinfo_;
  }
  if (ouserinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ouserinfo);
    if (message_arena != submessage_arena) {
      ouserinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ouserinfo, submessage_arena);
    }
    
  } else {
    
  }
  ouserinfo_ = ouserinfo;
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.user_battle_info_t.oUserInfo)
}

// int32 iMatchSec = 3;
inline void user_battle_info_t::clear_imatchsec() {
  imatchsec_ = 0;
}
inline int32_t user_battle_info_t::_internal_imatchsec() const {
  return imatchsec_;
}
inline int32_t user_battle_info_t::imatchsec() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_info_t.iMatchSec)
  return _internal_imatchsec();
}
inline void user_battle_info_t::_internal_set_imatchsec(int32_t value) {
  
  imatchsec_ = value;
}
inline void user_battle_info_t::set_imatchsec(int32_t value) {
  _internal_set_imatchsec(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_info_t.iMatchSec)
}

// bool bOb = 4;
inline void user_battle_info_t::clear_bob() {
  bob_ = false;
}
inline bool user_battle_info_t::_internal_bob() const {
  return bob_;
}
inline bool user_battle_info_t::bob() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_info_t.bOb)
  return _internal_bob();
}
inline void user_battle_info_t::_internal_set_bob(bool value) {
  
  bob_ = value;
}
inline void user_battle_info_t::set_bob(bool value) {
  _internal_set_bob(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_info_t.bOb)
}

// int32 iConvId = 5;
inline void user_battle_info_t::clear_iconvid() {
  iconvid_ = 0;
}
inline int32_t user_battle_info_t::_internal_iconvid() const {
  return iconvid_;
}
inline int32_t user_battle_info_t::iconvid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_info_t.iConvId)
  return _internal_iconvid();
}
inline void user_battle_info_t::_internal_set_iconvid(int32_t value) {
  
  iconvid_ = value;
}
inline void user_battle_info_t::set_iconvid(int32_t value) {
  _internal_set_iconvid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_info_t.iConvId)
}

// -------------------------------------------------------------------

// user_battle_result_t

// int64 llUid = 1;
inline void user_battle_result_t::clear_lluid() {
  lluid_ = int64_t{0};
}
inline int64_t user_battle_result_t::_internal_lluid() const {
  return lluid_;
}
inline int64_t user_battle_result_t::lluid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_result_t.llUid)
  return _internal_lluid();
}
inline void user_battle_result_t::_internal_set_lluid(int64_t value) {
  
  lluid_ = value;
}
inline void user_battle_result_t::set_lluid(int64_t value) {
  _internal_set_lluid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_result_t.llUid)
}

// int32 iPosition = 2;
inline void user_battle_result_t::clear_iposition() {
  iposition_ = 0;
}
inline int32_t user_battle_result_t::_internal_iposition() const {
  return iposition_;
}
inline int32_t user_battle_result_t::iposition() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_result_t.iPosition)
  return _internal_iposition();
}
inline void user_battle_result_t::_internal_set_iposition(int32_t value) {
  
  iposition_ = value;
}
inline void user_battle_result_t::set_iposition(int32_t value) {
  _internal_set_iposition(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_result_t.iPosition)
}

// .ProtoMsg.EBattleResult eResult = 3;
inline void user_battle_result_t::clear_eresult() {
  eresult_ = 0;
}
inline ::ProtoMsg::EBattleResult user_battle_result_t::_internal_eresult() const {
  return static_cast< ::ProtoMsg::EBattleResult >(eresult_);
}
inline ::ProtoMsg::EBattleResult user_battle_result_t::eresult() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_result_t.eResult)
  return _internal_eresult();
}
inline void user_battle_result_t::_internal_set_eresult(::ProtoMsg::EBattleResult value) {
  
  eresult_ = value;
}
inline void user_battle_result_t::set_eresult(::ProtoMsg::EBattleResult value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_result_t.eResult)
}

// int64 llEndTime = 4;
inline void user_battle_result_t::clear_llendtime() {
  llendtime_ = int64_t{0};
}
inline int64_t user_battle_result_t::_internal_llendtime() const {
  return llendtime_;
}
inline int64_t user_battle_result_t::llendtime() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.user_battle_result_t.llEndTime)
  return _internal_llendtime();
}
inline void user_battle_result_t::_internal_set_llendtime(int64_t value) {
  
  llendtime_ = value;
}
inline void user_battle_result_t::set_llendtime(int64_t value) {
  _internal_set_llendtime(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.user_battle_result_t.llEndTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoMsg::EPlayerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::EPlayerStatus>() {
  return ::ProtoMsg::EPlayerStatus_descriptor();
}
template <> struct is_proto_enum< ::ProtoMsg::ERoomType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::ERoomType>() {
  return ::ProtoMsg::ERoomType_descriptor();
}
template <> struct is_proto_enum< ::ProtoMsg::ELeisureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::ELeisureType>() {
  return ::ProtoMsg::ELeisureType_descriptor();
}
template <> struct is_proto_enum< ::ProtoMsg::ERoomStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::ERoomStatus>() {
  return ::ProtoMsg::ERoomStatus_descriptor();
}
template <> struct is_proto_enum< ::ProtoMsg::ERobotType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::ERobotType>() {
  return ::ProtoMsg::ERobotType_descriptor();
}
template <> struct is_proto_enum< ::ProtoMsg::EBattleResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::EBattleResult>() {
  return ::ProtoMsg::EBattleResult_descriptor();
}
template <> struct is_proto_enum< ::ProtoMsg::EBRCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::EBRCode>() {
  return ::ProtoMsg::EBRCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fcommon_2eproto
