// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_module_servercommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fservercommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fservercommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fmodule_5fservercommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fmodule_5fservercommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fmodule_5fservercommon_2eproto;
namespace ProtoMsg {
class MsgModule_ServerCommon;
struct MsgModule_ServerCommonDefaultTypeInternal;
extern MsgModule_ServerCommonDefaultTypeInternal _MsgModule_ServerCommon_default_instance_;
class Msg_ServerCommon_BeatHart_Req;
struct Msg_ServerCommon_BeatHart_ReqDefaultTypeInternal;
extern Msg_ServerCommon_BeatHart_ReqDefaultTypeInternal _Msg_ServerCommon_BeatHart_Req_default_instance_;
class Msg_ServerCommon_BeatHart_Rsp;
struct Msg_ServerCommon_BeatHart_RspDefaultTypeInternal;
extern Msg_ServerCommon_BeatHart_RspDefaultTypeInternal _Msg_ServerCommon_BeatHart_Rsp_default_instance_;
class Msg_ServerCommon_Register_Req;
struct Msg_ServerCommon_Register_ReqDefaultTypeInternal;
extern Msg_ServerCommon_Register_ReqDefaultTypeInternal _Msg_ServerCommon_Register_Req_default_instance_;
class Msg_ServerCommon_Register_Rsp;
struct Msg_ServerCommon_Register_RspDefaultTypeInternal;
extern Msg_ServerCommon_Register_RspDefaultTypeInternal _Msg_ServerCommon_Register_Rsp_default_instance_;
class Msg_ServerCommon_Transmit;
struct Msg_ServerCommon_TransmitDefaultTypeInternal;
extern Msg_ServerCommon_TransmitDefaultTypeInternal _Msg_ServerCommon_Transmit_default_instance_;
}  // namespace ProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMsg::MsgModule_ServerCommon* Arena::CreateMaybeMessage<::ProtoMsg::MsgModule_ServerCommon>(Arena*);
template<> ::ProtoMsg::Msg_ServerCommon_BeatHart_Req* Arena::CreateMaybeMessage<::ProtoMsg::Msg_ServerCommon_BeatHart_Req>(Arena*);
template<> ::ProtoMsg::Msg_ServerCommon_BeatHart_Rsp* Arena::CreateMaybeMessage<::ProtoMsg::Msg_ServerCommon_BeatHart_Rsp>(Arena*);
template<> ::ProtoMsg::Msg_ServerCommon_Register_Req* Arena::CreateMaybeMessage<::ProtoMsg::Msg_ServerCommon_Register_Req>(Arena*);
template<> ::ProtoMsg::Msg_ServerCommon_Register_Rsp* Arena::CreateMaybeMessage<::ProtoMsg::Msg_ServerCommon_Register_Rsp>(Arena*);
template<> ::ProtoMsg::Msg_ServerCommon_Transmit* Arena::CreateMaybeMessage<::ProtoMsg::Msg_ServerCommon_Transmit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMsg {

enum MsgModule_ServerCommon_MsgCmd : int {
  MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_None = 0,
  MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_Register_Req = 1,
  MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_Register_Rsp = 2,
  MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_BeatHart_Req = 3,
  MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_BeatHart_Rsp = 4,
  MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_Transmit = 5,
  MsgModule_ServerCommon_MsgCmd_MsgModule_ServerCommon_MsgCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgModule_ServerCommon_MsgCmd_MsgModule_ServerCommon_MsgCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgModule_ServerCommon_MsgCmd_IsValid(int value);
constexpr MsgModule_ServerCommon_MsgCmd MsgModule_ServerCommon_MsgCmd_MsgCmd_MIN = MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_None;
constexpr MsgModule_ServerCommon_MsgCmd MsgModule_ServerCommon_MsgCmd_MsgCmd_MAX = MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_Transmit;
constexpr int MsgModule_ServerCommon_MsgCmd_MsgCmd_ARRAYSIZE = MsgModule_ServerCommon_MsgCmd_MsgCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgModule_ServerCommon_MsgCmd_descriptor();
template<typename T>
inline const std::string& MsgModule_ServerCommon_MsgCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgModule_ServerCommon_MsgCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgModule_ServerCommon_MsgCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgModule_ServerCommon_MsgCmd_descriptor(), enum_t_value);
}
inline bool MsgModule_ServerCommon_MsgCmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgModule_ServerCommon_MsgCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgModule_ServerCommon_MsgCmd>(
    MsgModule_ServerCommon_MsgCmd_descriptor(), name, value);
}
// ===================================================================

class MsgModule_ServerCommon final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.MsgModule_ServerCommon) */ {
 public:
  inline MsgModule_ServerCommon() : MsgModule_ServerCommon(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MsgModule_ServerCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgModule_ServerCommon(const MsgModule_ServerCommon& from);
  MsgModule_ServerCommon(MsgModule_ServerCommon&& from) noexcept
    : MsgModule_ServerCommon() {
    *this = ::std::move(from);
  }

  inline MsgModule_ServerCommon& operator=(const MsgModule_ServerCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgModule_ServerCommon& operator=(MsgModule_ServerCommon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgModule_ServerCommon& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgModule_ServerCommon* internal_default_instance() {
    return reinterpret_cast<const MsgModule_ServerCommon*>(
               &_MsgModule_ServerCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgModule_ServerCommon& a, MsgModule_ServerCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgModule_ServerCommon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgModule_ServerCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgModule_ServerCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgModule_ServerCommon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgModule_ServerCommon& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgModule_ServerCommon& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.MsgModule_ServerCommon";
  }
  protected:
  explicit MsgModule_ServerCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgModule_ServerCommon_MsgCmd MsgCmd;
  static constexpr MsgCmd Msg_ServerCommon_None =
    MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_None;
  static constexpr MsgCmd Msg_ServerCommon_Register_Req =
    MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_Register_Req;
  static constexpr MsgCmd Msg_ServerCommon_Register_Rsp =
    MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_Register_Rsp;
  static constexpr MsgCmd Msg_ServerCommon_BeatHart_Req =
    MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_BeatHart_Req;
  static constexpr MsgCmd Msg_ServerCommon_BeatHart_Rsp =
    MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_BeatHart_Rsp;
  static constexpr MsgCmd Msg_ServerCommon_Transmit =
    MsgModule_ServerCommon_MsgCmd_Msg_ServerCommon_Transmit;
  static inline bool MsgCmd_IsValid(int value) {
    return MsgModule_ServerCommon_MsgCmd_IsValid(value);
  }
  static constexpr MsgCmd MsgCmd_MIN =
    MsgModule_ServerCommon_MsgCmd_MsgCmd_MIN;
  static constexpr MsgCmd MsgCmd_MAX =
    MsgModule_ServerCommon_MsgCmd_MsgCmd_MAX;
  static constexpr int MsgCmd_ARRAYSIZE =
    MsgModule_ServerCommon_MsgCmd_MsgCmd_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgCmd_descriptor() {
    return MsgModule_ServerCommon_MsgCmd_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgCmd_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgCmd>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgCmd_Name.");
    return MsgModule_ServerCommon_MsgCmd_Name(enum_t_value);
  }
  static inline bool MsgCmd_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgCmd* value) {
    return MsgModule_ServerCommon_MsgCmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.MsgModule_ServerCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fservercommon_2eproto;
};
// -------------------------------------------------------------------

class Msg_ServerCommon_Register_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_ServerCommon_Register_Req) */ {
 public:
  inline Msg_ServerCommon_Register_Req() : Msg_ServerCommon_Register_Req(nullptr) {}
  ~Msg_ServerCommon_Register_Req() override;
  explicit PROTOBUF_CONSTEXPR Msg_ServerCommon_Register_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ServerCommon_Register_Req(const Msg_ServerCommon_Register_Req& from);
  Msg_ServerCommon_Register_Req(Msg_ServerCommon_Register_Req&& from) noexcept
    : Msg_ServerCommon_Register_Req() {
    *this = ::std::move(from);
  }

  inline Msg_ServerCommon_Register_Req& operator=(const Msg_ServerCommon_Register_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ServerCommon_Register_Req& operator=(Msg_ServerCommon_Register_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ServerCommon_Register_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ServerCommon_Register_Req* internal_default_instance() {
    return reinterpret_cast<const Msg_ServerCommon_Register_Req*>(
               &_Msg_ServerCommon_Register_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_ServerCommon_Register_Req& a, Msg_ServerCommon_Register_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ServerCommon_Register_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ServerCommon_Register_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ServerCommon_Register_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ServerCommon_Register_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_ServerCommon_Register_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_ServerCommon_Register_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_ServerCommon_Register_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_ServerCommon_Register_Req";
  }
  protected:
  explicit Msg_ServerCommon_Register_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrExIpFieldNumber = 6,
    kUiServerKindFieldNumber = 1,
    kUiServerIdFieldNumber = 2,
    kUiPlatIdFieldNumber = 3,
    kUiIndexFieldNumber = 4,
    kUiGroupIdFieldNumber = 5,
  };
  // string strExIp = 6;
  void clear_strexip();
  const std::string& strexip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strexip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strexip();
  PROTOBUF_NODISCARD std::string* release_strexip();
  void set_allocated_strexip(std::string* strexip);
  private:
  const std::string& _internal_strexip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strexip(const std::string& value);
  std::string* _internal_mutable_strexip();
  public:

  // uint32 uiServerKind = 1;
  void clear_uiserverkind();
  uint32_t uiserverkind() const;
  void set_uiserverkind(uint32_t value);
  private:
  uint32_t _internal_uiserverkind() const;
  void _internal_set_uiserverkind(uint32_t value);
  public:

  // uint32 uiServerId = 2;
  void clear_uiserverid();
  uint32_t uiserverid() const;
  void set_uiserverid(uint32_t value);
  private:
  uint32_t _internal_uiserverid() const;
  void _internal_set_uiserverid(uint32_t value);
  public:

  // uint32 uiPlatId = 3;
  void clear_uiplatid();
  uint32_t uiplatid() const;
  void set_uiplatid(uint32_t value);
  private:
  uint32_t _internal_uiplatid() const;
  void _internal_set_uiplatid(uint32_t value);
  public:

  // uint32 uiIndex = 4;
  void clear_uiindex();
  uint32_t uiindex() const;
  void set_uiindex(uint32_t value);
  private:
  uint32_t _internal_uiindex() const;
  void _internal_set_uiindex(uint32_t value);
  public:

  // uint32 uiGroupId = 5;
  void clear_uigroupid();
  uint32_t uigroupid() const;
  void set_uigroupid(uint32_t value);
  private:
  uint32_t _internal_uigroupid() const;
  void _internal_set_uigroupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_ServerCommon_Register_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strexip_;
  uint32_t uiserverkind_;
  uint32_t uiserverid_;
  uint32_t uiplatid_;
  uint32_t uiindex_;
  uint32_t uigroupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fservercommon_2eproto;
};
// -------------------------------------------------------------------

class Msg_ServerCommon_Register_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_ServerCommon_Register_Rsp) */ {
 public:
  inline Msg_ServerCommon_Register_Rsp() : Msg_ServerCommon_Register_Rsp(nullptr) {}
  ~Msg_ServerCommon_Register_Rsp() override;
  explicit PROTOBUF_CONSTEXPR Msg_ServerCommon_Register_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ServerCommon_Register_Rsp(const Msg_ServerCommon_Register_Rsp& from);
  Msg_ServerCommon_Register_Rsp(Msg_ServerCommon_Register_Rsp&& from) noexcept
    : Msg_ServerCommon_Register_Rsp() {
    *this = ::std::move(from);
  }

  inline Msg_ServerCommon_Register_Rsp& operator=(const Msg_ServerCommon_Register_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ServerCommon_Register_Rsp& operator=(Msg_ServerCommon_Register_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ServerCommon_Register_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ServerCommon_Register_Rsp* internal_default_instance() {
    return reinterpret_cast<const Msg_ServerCommon_Register_Rsp*>(
               &_Msg_ServerCommon_Register_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_ServerCommon_Register_Rsp& a, Msg_ServerCommon_Register_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ServerCommon_Register_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ServerCommon_Register_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ServerCommon_Register_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ServerCommon_Register_Rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_ServerCommon_Register_Rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_ServerCommon_Register_Rsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_ServerCommon_Register_Rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_ServerCommon_Register_Rsp";
  }
  protected:
  explicit Msg_ServerCommon_Register_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrCommentFieldNumber = 4,
    kUiServerKindFieldNumber = 1,
    kUiServerIdFieldNumber = 2,
    kBFirstConFieldNumber = 3,
  };
  // string strComment = 4;
  void clear_strcomment();
  const std::string& strcomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strcomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strcomment();
  PROTOBUF_NODISCARD std::string* release_strcomment();
  void set_allocated_strcomment(std::string* strcomment);
  private:
  const std::string& _internal_strcomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcomment(const std::string& value);
  std::string* _internal_mutable_strcomment();
  public:

  // uint32 uiServerKind = 1;
  void clear_uiserverkind();
  uint32_t uiserverkind() const;
  void set_uiserverkind(uint32_t value);
  private:
  uint32_t _internal_uiserverkind() const;
  void _internal_set_uiserverkind(uint32_t value);
  public:

  // uint32 uiServerId = 2;
  void clear_uiserverid();
  uint32_t uiserverid() const;
  void set_uiserverid(uint32_t value);
  private:
  uint32_t _internal_uiserverid() const;
  void _internal_set_uiserverid(uint32_t value);
  public:

  // bool bFirstCon = 3;
  void clear_bfirstcon();
  bool bfirstcon() const;
  void set_bfirstcon(bool value);
  private:
  bool _internal_bfirstcon() const;
  void _internal_set_bfirstcon(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_ServerCommon_Register_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcomment_;
  uint32_t uiserverkind_;
  uint32_t uiserverid_;
  bool bfirstcon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fservercommon_2eproto;
};
// -------------------------------------------------------------------

class Msg_ServerCommon_BeatHart_Req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_ServerCommon_BeatHart_Req) */ {
 public:
  inline Msg_ServerCommon_BeatHart_Req() : Msg_ServerCommon_BeatHart_Req(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Msg_ServerCommon_BeatHart_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ServerCommon_BeatHart_Req(const Msg_ServerCommon_BeatHart_Req& from);
  Msg_ServerCommon_BeatHart_Req(Msg_ServerCommon_BeatHart_Req&& from) noexcept
    : Msg_ServerCommon_BeatHart_Req() {
    *this = ::std::move(from);
  }

  inline Msg_ServerCommon_BeatHart_Req& operator=(const Msg_ServerCommon_BeatHart_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ServerCommon_BeatHart_Req& operator=(Msg_ServerCommon_BeatHart_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ServerCommon_BeatHart_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ServerCommon_BeatHart_Req* internal_default_instance() {
    return reinterpret_cast<const Msg_ServerCommon_BeatHart_Req*>(
               &_Msg_ServerCommon_BeatHart_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_ServerCommon_BeatHart_Req& a, Msg_ServerCommon_BeatHart_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ServerCommon_BeatHart_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ServerCommon_BeatHart_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ServerCommon_BeatHart_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ServerCommon_BeatHart_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_ServerCommon_BeatHart_Req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_ServerCommon_BeatHart_Req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_ServerCommon_BeatHart_Req";
  }
  protected:
  explicit Msg_ServerCommon_BeatHart_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_ServerCommon_BeatHart_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fservercommon_2eproto;
};
// -------------------------------------------------------------------

class Msg_ServerCommon_BeatHart_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_ServerCommon_BeatHart_Rsp) */ {
 public:
  inline Msg_ServerCommon_BeatHart_Rsp() : Msg_ServerCommon_BeatHart_Rsp(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Msg_ServerCommon_BeatHart_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ServerCommon_BeatHart_Rsp(const Msg_ServerCommon_BeatHart_Rsp& from);
  Msg_ServerCommon_BeatHart_Rsp(Msg_ServerCommon_BeatHart_Rsp&& from) noexcept
    : Msg_ServerCommon_BeatHart_Rsp() {
    *this = ::std::move(from);
  }

  inline Msg_ServerCommon_BeatHart_Rsp& operator=(const Msg_ServerCommon_BeatHart_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ServerCommon_BeatHart_Rsp& operator=(Msg_ServerCommon_BeatHart_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ServerCommon_BeatHart_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ServerCommon_BeatHart_Rsp* internal_default_instance() {
    return reinterpret_cast<const Msg_ServerCommon_BeatHart_Rsp*>(
               &_Msg_ServerCommon_BeatHart_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_ServerCommon_BeatHart_Rsp& a, Msg_ServerCommon_BeatHart_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ServerCommon_BeatHart_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ServerCommon_BeatHart_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ServerCommon_BeatHart_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ServerCommon_BeatHart_Rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_ServerCommon_BeatHart_Rsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_ServerCommon_BeatHart_Rsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_ServerCommon_BeatHart_Rsp";
  }
  protected:
  explicit Msg_ServerCommon_BeatHart_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_ServerCommon_BeatHart_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_msg_5fmodule_5fservercommon_2eproto;
};
// -------------------------------------------------------------------

class Msg_ServerCommon_Transmit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMsg.Msg_ServerCommon_Transmit) */ {
 public:
  inline Msg_ServerCommon_Transmit() : Msg_ServerCommon_Transmit(nullptr) {}
  ~Msg_ServerCommon_Transmit() override;
  explicit PROTOBUF_CONSTEXPR Msg_ServerCommon_Transmit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ServerCommon_Transmit(const Msg_ServerCommon_Transmit& from);
  Msg_ServerCommon_Transmit(Msg_ServerCommon_Transmit&& from) noexcept
    : Msg_ServerCommon_Transmit() {
    *this = ::std::move(from);
  }

  inline Msg_ServerCommon_Transmit& operator=(const Msg_ServerCommon_Transmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ServerCommon_Transmit& operator=(Msg_ServerCommon_Transmit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ServerCommon_Transmit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ServerCommon_Transmit* internal_default_instance() {
    return reinterpret_cast<const Msg_ServerCommon_Transmit*>(
               &_Msg_ServerCommon_Transmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_ServerCommon_Transmit& a, Msg_ServerCommon_Transmit& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ServerCommon_Transmit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ServerCommon_Transmit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ServerCommon_Transmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ServerCommon_Transmit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_ServerCommon_Transmit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_ServerCommon_Transmit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_ServerCommon_Transmit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMsg.Msg_ServerCommon_Transmit";
  }
  protected:
  explicit Msg_ServerCommon_Transmit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecUIdsFieldNumber = 2,
    kStrCmdMsgFieldNumber = 7,
    kLlUidFieldNumber = 1,
    kUiModuleIdFieldNumber = 3,
    kUiCmdFieldNumber = 4,
    kUiSequenceFieldNumber = 5,
    kUiRetCodeFieldNumber = 6,
  };
  // repeated int64 vecUIds = 2;
  int vecuids_size() const;
  private:
  int _internal_vecuids_size() const;
  public:
  void clear_vecuids();
  private:
  int64_t _internal_vecuids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_vecuids() const;
  void _internal_add_vecuids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_vecuids();
  public:
  int64_t vecuids(int index) const;
  void set_vecuids(int index, int64_t value);
  void add_vecuids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      vecuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_vecuids();

  // bytes strCmdMsg = 7;
  void clear_strcmdmsg();
  const std::string& strcmdmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strcmdmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strcmdmsg();
  PROTOBUF_NODISCARD std::string* release_strcmdmsg();
  void set_allocated_strcmdmsg(std::string* strcmdmsg);
  private:
  const std::string& _internal_strcmdmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcmdmsg(const std::string& value);
  std::string* _internal_mutable_strcmdmsg();
  public:

  // int64 llUid = 1;
  void clear_lluid();
  int64_t lluid() const;
  void set_lluid(int64_t value);
  private:
  int64_t _internal_lluid() const;
  void _internal_set_lluid(int64_t value);
  public:

  // uint32 uiModuleId = 3;
  void clear_uimoduleid();
  uint32_t uimoduleid() const;
  void set_uimoduleid(uint32_t value);
  private:
  uint32_t _internal_uimoduleid() const;
  void _internal_set_uimoduleid(uint32_t value);
  public:

  // uint32 uiCmd = 4;
  void clear_uicmd();
  uint32_t uicmd() const;
  void set_uicmd(uint32_t value);
  private:
  uint32_t _internal_uicmd() const;
  void _internal_set_uicmd(uint32_t value);
  public:

  // uint32 uiSequence = 5;
  void clear_uisequence();
  uint32_t uisequence() const;
  void set_uisequence(uint32_t value);
  private:
  uint32_t _internal_uisequence() const;
  void _internal_set_uisequence(uint32_t value);
  public:

  // uint32 uiRetCode = 6;
  void clear_uiretcode();
  uint32_t uiretcode() const;
  void set_uiretcode(uint32_t value);
  private:
  uint32_t _internal_uiretcode() const;
  void _internal_set_uiretcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMsg.Msg_ServerCommon_Transmit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > vecuids_;
  mutable std::atomic<int> _vecuids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcmdmsg_;
  int64_t lluid_;
  uint32_t uimoduleid_;
  uint32_t uicmd_;
  uint32_t uisequence_;
  uint32_t uiretcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fmodule_5fservercommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgModule_ServerCommon

// -------------------------------------------------------------------

// Msg_ServerCommon_Register_Req

// uint32 uiServerKind = 1;
inline void Msg_ServerCommon_Register_Req::clear_uiserverkind() {
  uiserverkind_ = 0u;
}
inline uint32_t Msg_ServerCommon_Register_Req::_internal_uiserverkind() const {
  return uiserverkind_;
}
inline uint32_t Msg_ServerCommon_Register_Req::uiserverkind() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Req.uiServerKind)
  return _internal_uiserverkind();
}
inline void Msg_ServerCommon_Register_Req::_internal_set_uiserverkind(uint32_t value) {
  
  uiserverkind_ = value;
}
inline void Msg_ServerCommon_Register_Req::set_uiserverkind(uint32_t value) {
  _internal_set_uiserverkind(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Req.uiServerKind)
}

// uint32 uiServerId = 2;
inline void Msg_ServerCommon_Register_Req::clear_uiserverid() {
  uiserverid_ = 0u;
}
inline uint32_t Msg_ServerCommon_Register_Req::_internal_uiserverid() const {
  return uiserverid_;
}
inline uint32_t Msg_ServerCommon_Register_Req::uiserverid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Req.uiServerId)
  return _internal_uiserverid();
}
inline void Msg_ServerCommon_Register_Req::_internal_set_uiserverid(uint32_t value) {
  
  uiserverid_ = value;
}
inline void Msg_ServerCommon_Register_Req::set_uiserverid(uint32_t value) {
  _internal_set_uiserverid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Req.uiServerId)
}

// uint32 uiPlatId = 3;
inline void Msg_ServerCommon_Register_Req::clear_uiplatid() {
  uiplatid_ = 0u;
}
inline uint32_t Msg_ServerCommon_Register_Req::_internal_uiplatid() const {
  return uiplatid_;
}
inline uint32_t Msg_ServerCommon_Register_Req::uiplatid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Req.uiPlatId)
  return _internal_uiplatid();
}
inline void Msg_ServerCommon_Register_Req::_internal_set_uiplatid(uint32_t value) {
  
  uiplatid_ = value;
}
inline void Msg_ServerCommon_Register_Req::set_uiplatid(uint32_t value) {
  _internal_set_uiplatid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Req.uiPlatId)
}

// uint32 uiIndex = 4;
inline void Msg_ServerCommon_Register_Req::clear_uiindex() {
  uiindex_ = 0u;
}
inline uint32_t Msg_ServerCommon_Register_Req::_internal_uiindex() const {
  return uiindex_;
}
inline uint32_t Msg_ServerCommon_Register_Req::uiindex() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Req.uiIndex)
  return _internal_uiindex();
}
inline void Msg_ServerCommon_Register_Req::_internal_set_uiindex(uint32_t value) {
  
  uiindex_ = value;
}
inline void Msg_ServerCommon_Register_Req::set_uiindex(uint32_t value) {
  _internal_set_uiindex(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Req.uiIndex)
}

// uint32 uiGroupId = 5;
inline void Msg_ServerCommon_Register_Req::clear_uigroupid() {
  uigroupid_ = 0u;
}
inline uint32_t Msg_ServerCommon_Register_Req::_internal_uigroupid() const {
  return uigroupid_;
}
inline uint32_t Msg_ServerCommon_Register_Req::uigroupid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Req.uiGroupId)
  return _internal_uigroupid();
}
inline void Msg_ServerCommon_Register_Req::_internal_set_uigroupid(uint32_t value) {
  
  uigroupid_ = value;
}
inline void Msg_ServerCommon_Register_Req::set_uigroupid(uint32_t value) {
  _internal_set_uigroupid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Req.uiGroupId)
}

// string strExIp = 6;
inline void Msg_ServerCommon_Register_Req::clear_strexip() {
  strexip_.ClearToEmpty();
}
inline const std::string& Msg_ServerCommon_Register_Req::strexip() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Req.strExIp)
  return _internal_strexip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_ServerCommon_Register_Req::set_strexip(ArgT0&& arg0, ArgT... args) {
 
 strexip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Req.strExIp)
}
inline std::string* Msg_ServerCommon_Register_Req::mutable_strexip() {
  std::string* _s = _internal_mutable_strexip();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_ServerCommon_Register_Req.strExIp)
  return _s;
}
inline const std::string& Msg_ServerCommon_Register_Req::_internal_strexip() const {
  return strexip_.Get();
}
inline void Msg_ServerCommon_Register_Req::_internal_set_strexip(const std::string& value) {
  
  strexip_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_ServerCommon_Register_Req::_internal_mutable_strexip() {
  
  return strexip_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_ServerCommon_Register_Req::release_strexip() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Msg_ServerCommon_Register_Req.strExIp)
  return strexip_.Release();
}
inline void Msg_ServerCommon_Register_Req::set_allocated_strexip(std::string* strexip) {
  if (strexip != nullptr) {
    
  } else {
    
  }
  strexip_.SetAllocated(strexip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strexip_.IsDefault()) {
    strexip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Msg_ServerCommon_Register_Req.strExIp)
}

// -------------------------------------------------------------------

// Msg_ServerCommon_Register_Rsp

// uint32 uiServerKind = 1;
inline void Msg_ServerCommon_Register_Rsp::clear_uiserverkind() {
  uiserverkind_ = 0u;
}
inline uint32_t Msg_ServerCommon_Register_Rsp::_internal_uiserverkind() const {
  return uiserverkind_;
}
inline uint32_t Msg_ServerCommon_Register_Rsp::uiserverkind() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Rsp.uiServerKind)
  return _internal_uiserverkind();
}
inline void Msg_ServerCommon_Register_Rsp::_internal_set_uiserverkind(uint32_t value) {
  
  uiserverkind_ = value;
}
inline void Msg_ServerCommon_Register_Rsp::set_uiserverkind(uint32_t value) {
  _internal_set_uiserverkind(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Rsp.uiServerKind)
}

// uint32 uiServerId = 2;
inline void Msg_ServerCommon_Register_Rsp::clear_uiserverid() {
  uiserverid_ = 0u;
}
inline uint32_t Msg_ServerCommon_Register_Rsp::_internal_uiserverid() const {
  return uiserverid_;
}
inline uint32_t Msg_ServerCommon_Register_Rsp::uiserverid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Rsp.uiServerId)
  return _internal_uiserverid();
}
inline void Msg_ServerCommon_Register_Rsp::_internal_set_uiserverid(uint32_t value) {
  
  uiserverid_ = value;
}
inline void Msg_ServerCommon_Register_Rsp::set_uiserverid(uint32_t value) {
  _internal_set_uiserverid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Rsp.uiServerId)
}

// bool bFirstCon = 3;
inline void Msg_ServerCommon_Register_Rsp::clear_bfirstcon() {
  bfirstcon_ = false;
}
inline bool Msg_ServerCommon_Register_Rsp::_internal_bfirstcon() const {
  return bfirstcon_;
}
inline bool Msg_ServerCommon_Register_Rsp::bfirstcon() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Rsp.bFirstCon)
  return _internal_bfirstcon();
}
inline void Msg_ServerCommon_Register_Rsp::_internal_set_bfirstcon(bool value) {
  
  bfirstcon_ = value;
}
inline void Msg_ServerCommon_Register_Rsp::set_bfirstcon(bool value) {
  _internal_set_bfirstcon(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Rsp.bFirstCon)
}

// string strComment = 4;
inline void Msg_ServerCommon_Register_Rsp::clear_strcomment() {
  strcomment_.ClearToEmpty();
}
inline const std::string& Msg_ServerCommon_Register_Rsp::strcomment() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Register_Rsp.strComment)
  return _internal_strcomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_ServerCommon_Register_Rsp::set_strcomment(ArgT0&& arg0, ArgT... args) {
 
 strcomment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Register_Rsp.strComment)
}
inline std::string* Msg_ServerCommon_Register_Rsp::mutable_strcomment() {
  std::string* _s = _internal_mutable_strcomment();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_ServerCommon_Register_Rsp.strComment)
  return _s;
}
inline const std::string& Msg_ServerCommon_Register_Rsp::_internal_strcomment() const {
  return strcomment_.Get();
}
inline void Msg_ServerCommon_Register_Rsp::_internal_set_strcomment(const std::string& value) {
  
  strcomment_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_ServerCommon_Register_Rsp::_internal_mutable_strcomment() {
  
  return strcomment_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_ServerCommon_Register_Rsp::release_strcomment() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Msg_ServerCommon_Register_Rsp.strComment)
  return strcomment_.Release();
}
inline void Msg_ServerCommon_Register_Rsp::set_allocated_strcomment(std::string* strcomment) {
  if (strcomment != nullptr) {
    
  } else {
    
  }
  strcomment_.SetAllocated(strcomment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strcomment_.IsDefault()) {
    strcomment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Msg_ServerCommon_Register_Rsp.strComment)
}

// -------------------------------------------------------------------

// Msg_ServerCommon_BeatHart_Req

// -------------------------------------------------------------------

// Msg_ServerCommon_BeatHart_Rsp

// -------------------------------------------------------------------

// Msg_ServerCommon_Transmit

// int64 llUid = 1;
inline void Msg_ServerCommon_Transmit::clear_lluid() {
  lluid_ = int64_t{0};
}
inline int64_t Msg_ServerCommon_Transmit::_internal_lluid() const {
  return lluid_;
}
inline int64_t Msg_ServerCommon_Transmit::lluid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Transmit.llUid)
  return _internal_lluid();
}
inline void Msg_ServerCommon_Transmit::_internal_set_lluid(int64_t value) {
  
  lluid_ = value;
}
inline void Msg_ServerCommon_Transmit::set_lluid(int64_t value) {
  _internal_set_lluid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Transmit.llUid)
}

// repeated int64 vecUIds = 2;
inline int Msg_ServerCommon_Transmit::_internal_vecuids_size() const {
  return vecuids_.size();
}
inline int Msg_ServerCommon_Transmit::vecuids_size() const {
  return _internal_vecuids_size();
}
inline void Msg_ServerCommon_Transmit::clear_vecuids() {
  vecuids_.Clear();
}
inline int64_t Msg_ServerCommon_Transmit::_internal_vecuids(int index) const {
  return vecuids_.Get(index);
}
inline int64_t Msg_ServerCommon_Transmit::vecuids(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Transmit.vecUIds)
  return _internal_vecuids(index);
}
inline void Msg_ServerCommon_Transmit::set_vecuids(int index, int64_t value) {
  vecuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Transmit.vecUIds)
}
inline void Msg_ServerCommon_Transmit::_internal_add_vecuids(int64_t value) {
  vecuids_.Add(value);
}
inline void Msg_ServerCommon_Transmit::add_vecuids(int64_t value) {
  _internal_add_vecuids(value);
  // @@protoc_insertion_point(field_add:ProtoMsg.Msg_ServerCommon_Transmit.vecUIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Msg_ServerCommon_Transmit::_internal_vecuids() const {
  return vecuids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Msg_ServerCommon_Transmit::vecuids() const {
  // @@protoc_insertion_point(field_list:ProtoMsg.Msg_ServerCommon_Transmit.vecUIds)
  return _internal_vecuids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Msg_ServerCommon_Transmit::_internal_mutable_vecuids() {
  return &vecuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Msg_ServerCommon_Transmit::mutable_vecuids() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMsg.Msg_ServerCommon_Transmit.vecUIds)
  return _internal_mutable_vecuids();
}

// uint32 uiModuleId = 3;
inline void Msg_ServerCommon_Transmit::clear_uimoduleid() {
  uimoduleid_ = 0u;
}
inline uint32_t Msg_ServerCommon_Transmit::_internal_uimoduleid() const {
  return uimoduleid_;
}
inline uint32_t Msg_ServerCommon_Transmit::uimoduleid() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Transmit.uiModuleId)
  return _internal_uimoduleid();
}
inline void Msg_ServerCommon_Transmit::_internal_set_uimoduleid(uint32_t value) {
  
  uimoduleid_ = value;
}
inline void Msg_ServerCommon_Transmit::set_uimoduleid(uint32_t value) {
  _internal_set_uimoduleid(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Transmit.uiModuleId)
}

// uint32 uiCmd = 4;
inline void Msg_ServerCommon_Transmit::clear_uicmd() {
  uicmd_ = 0u;
}
inline uint32_t Msg_ServerCommon_Transmit::_internal_uicmd() const {
  return uicmd_;
}
inline uint32_t Msg_ServerCommon_Transmit::uicmd() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Transmit.uiCmd)
  return _internal_uicmd();
}
inline void Msg_ServerCommon_Transmit::_internal_set_uicmd(uint32_t value) {
  
  uicmd_ = value;
}
inline void Msg_ServerCommon_Transmit::set_uicmd(uint32_t value) {
  _internal_set_uicmd(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Transmit.uiCmd)
}

// uint32 uiSequence = 5;
inline void Msg_ServerCommon_Transmit::clear_uisequence() {
  uisequence_ = 0u;
}
inline uint32_t Msg_ServerCommon_Transmit::_internal_uisequence() const {
  return uisequence_;
}
inline uint32_t Msg_ServerCommon_Transmit::uisequence() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Transmit.uiSequence)
  return _internal_uisequence();
}
inline void Msg_ServerCommon_Transmit::_internal_set_uisequence(uint32_t value) {
  
  uisequence_ = value;
}
inline void Msg_ServerCommon_Transmit::set_uisequence(uint32_t value) {
  _internal_set_uisequence(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Transmit.uiSequence)
}

// uint32 uiRetCode = 6;
inline void Msg_ServerCommon_Transmit::clear_uiretcode() {
  uiretcode_ = 0u;
}
inline uint32_t Msg_ServerCommon_Transmit::_internal_uiretcode() const {
  return uiretcode_;
}
inline uint32_t Msg_ServerCommon_Transmit::uiretcode() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Transmit.uiRetCode)
  return _internal_uiretcode();
}
inline void Msg_ServerCommon_Transmit::_internal_set_uiretcode(uint32_t value) {
  
  uiretcode_ = value;
}
inline void Msg_ServerCommon_Transmit::set_uiretcode(uint32_t value) {
  _internal_set_uiretcode(value);
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Transmit.uiRetCode)
}

// bytes strCmdMsg = 7;
inline void Msg_ServerCommon_Transmit::clear_strcmdmsg() {
  strcmdmsg_.ClearToEmpty();
}
inline const std::string& Msg_ServerCommon_Transmit::strcmdmsg() const {
  // @@protoc_insertion_point(field_get:ProtoMsg.Msg_ServerCommon_Transmit.strCmdMsg)
  return _internal_strcmdmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_ServerCommon_Transmit::set_strcmdmsg(ArgT0&& arg0, ArgT... args) {
 
 strcmdmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMsg.Msg_ServerCommon_Transmit.strCmdMsg)
}
inline std::string* Msg_ServerCommon_Transmit::mutable_strcmdmsg() {
  std::string* _s = _internal_mutable_strcmdmsg();
  // @@protoc_insertion_point(field_mutable:ProtoMsg.Msg_ServerCommon_Transmit.strCmdMsg)
  return _s;
}
inline const std::string& Msg_ServerCommon_Transmit::_internal_strcmdmsg() const {
  return strcmdmsg_.Get();
}
inline void Msg_ServerCommon_Transmit::_internal_set_strcmdmsg(const std::string& value) {
  
  strcmdmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_ServerCommon_Transmit::_internal_mutable_strcmdmsg() {
  
  return strcmdmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_ServerCommon_Transmit::release_strcmdmsg() {
  // @@protoc_insertion_point(field_release:ProtoMsg.Msg_ServerCommon_Transmit.strCmdMsg)
  return strcmdmsg_.Release();
}
inline void Msg_ServerCommon_Transmit::set_allocated_strcmdmsg(std::string* strcmdmsg) {
  if (strcmdmsg != nullptr) {
    
  } else {
    
  }
  strcmdmsg_.SetAllocated(strcmdmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strcmdmsg_.IsDefault()) {
    strcmdmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMsg.Msg_ServerCommon_Transmit.strCmdMsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoMsg::MsgModule_ServerCommon_MsgCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsg::MsgModule_ServerCommon_MsgCmd>() {
  return ::ProtoMsg::MsgModule_ServerCommon_MsgCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fmodule_5fservercommon_2eproto
