{%- set keyField = namespace(type='', mem_name='', pb_name='', cache_name='') -%}
{%- for field in field_list %}
{%- if field.m_strFKey == True %}
{%-set keyField.type = field.m_strType -%}
{%-set keyField.mem_name = field.m_strMemName -%}
{%-set keyField.pb_name = field.m_strPbName -%}
{%-set keyField.cache_name = field.m_strCacheName -%}
{%-endif %}
{%- endfor %}
#pragma once
#include "db_struct.h"
#include "{{st_file}}.h"
namespace ProtoMsg
{
    class Msg_ServerDB_GD_Update{{col_name}};
    class user_pb_data_t;
}
using namespace ProtoMsg;

struct {{db_name}}
{
    static const char* tb_name;
    {%- for field in field_list %}
    {%- if field.m_strKey == True %}
    static const char* id;
    {%- else %}
    static const char* {{field.m_strName}};
    {%- endif %}
    {%- endfor %}
};

class CDBUser;
class {{dbpkg_name}}
{
public:
    static void OnUpdate{{col_name}}(unsigned char* pMsg, size_t uiLen);

    static bool ReadDB{{col_name}}(sDBSecRet& vecMap, CDBUser* pUser);

    void Set{{col_name}}(user_pb_data_t& oData);

{%- if col_type == 'object' %}
    {{doc_name}}_t& Get{{col_name}}() { return m_o{{col_name}}; }
{%- endif %}
private:
    bool Update{{col_name}}(Msg_ServerDB_GD_Update{{col_name}}& oUpdate);

{%- if col_type == 'list' %}
    bool AddDB{{col_name}}(const MMsg_ServerDB_GD_Update{{col_name}}& oUpdate);
    bool UpdateDB{{col_name}}(const MMsg_ServerDB_GD_Update{{col_name}}& oUpdate);
    bool DeleteOneDB{{col_name}}(const MMsg_ServerDB_GD_Update{{col_name}}& oUpdate);
    bool DeleteAllDB{{col_name}}(const MMsg_ServerDB_GD_Update{{col_name}}& oUpdate);

    std::map<{{keyField.type}}, {{st_name}}> m_map{{col_name}};
{%- else %}
    bool AddOrUpdateDB{{col_name}}(const Msg_ServerDB_GD_Update{{col_name}}& oUpdate);

    {{doc_name}}_t m_o{{col_name}};
{%- endif %}
};